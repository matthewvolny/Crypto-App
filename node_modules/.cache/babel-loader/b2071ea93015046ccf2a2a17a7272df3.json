{"ast":null,"code":"var _jsxFileName = \"/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/CoinRow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useContext } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CoinRow(props) {\n  _s();\n\n  const isMounted = useRef(false); // console.log(props);\n  // const { name, price, percentChange, data } = props.coin;\n\n  const {\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr,\n    sparkline\n  } = useContext(Context.coinData); // useEffect(() => {\n  //   if (isMounted.current) {\n  //     const chart = createChart(document.querySelector(\".chart\"), {\n  //       width: 400,\n  //       height: 300,\n  //       rightPriceScale: {\n  //         visible: false,\n  //       },\n  //       grid: {\n  //         vertLines: {\n  //           visible: false,\n  //         },\n  //         horzLines: {\n  //           visible: false,\n  //         },\n  //       },\n  //       crosshair: {\n  //         vertLine: {\n  //           visible: false,\n  //         },\n  //         horzLine: {\n  //           visible: false,\n  //         },\n  //       },\n  //       layout: {\n  //         backgroundColor: \"tan\",\n  //       },\n  //       timeScale: { visible: false },\n  //       // borderColor: \"green\",\n  //       // timeVisible: false,\n  //       // priceScaleMode: percentChange,\n  //     });\n  //     //fits timescale to the content\n  //     chart.timeScale().fitContent();\n  //     const lineSeries = chart\n  //       .addLineSeries\n  //       //used to set y-axis scale (not quite sure exactly how it works)\n  //       //   {\n  //       //   autoscaleInfoProvider: () => ({\n  //       //     priceRange: {\n  //       //       minValue: 0,\n  //       //       maxValue: 100,\n  //       //     },\n  //       //   }),\n  //       // }\n  //       ();\n  //     lineSeries.applyOptions({\n  //       color: \"red\",\n  //       lineWidth: 5,\n  //       //crosshair dot\n  //       crosshairMarkerVisible: false,\n  //       //both of these are similar\n  //       lastValueVisible: false,\n  //       priceLineVisible: false,\n  //       //can make the series disapper (labels remain)\n  //       visible: true,\n  //       //\n  //     });\n  //     // const customFormatter = (time, tickMarkType, locale) => {\n  //     //   // tickMarkType: \"year\";\n  //     // };\n  //     lineSeries.setData(data);\n  //     //   window.addEventListener(\"resize\", handleResize);\n  //   } else {\n  //     isMounted.current = true;\n  //   }\n  // });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: rank\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image,\n        alt: \"crypto-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: symbol\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: price\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: percentChange24hr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: percentChange7d\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: marketCap\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: volume24hr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, rank, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CoinRow, \"h2DvHgIDdr5reJbDqbAYp37xg30=\");\n\n_c = CoinRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinRow\");","map":{"version":3,"sources":["/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/CoinRow.js"],"names":["React","useEffect","useRef","useContext","Context","createChart","CoinRow","props","isMounted","rank","image","name","symbol","price","percentChange24hr","percentChange7d","marketCap","volume24hr","sparkline","coinData"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,UAAnC,QAAqD,OAArD;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACrC,QAAMC,SAAS,GAAGN,MAAM,CAAC,KAAD,CAAxB,CADqC,CAErC;AACA;;AACA,QAAM;AACJO,IAAAA,IADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,IAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,KALI;AAMJC,IAAAA,iBANI;AAOJC,IAAAA,eAPI;AAQJC,IAAAA,SARI;AASJC,IAAAA,UATI;AAUJC,IAAAA;AAVI,MAWFf,UAAU,CAACC,OAAO,CAACe,QAAT,CAXd,CAJqC,CAiBrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA,4BACE;AAAA,gBAAMV;AAAN;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE;AAAK,QAAA,GAAG,EAAEC,KAAV;AAAiB,QAAA,GAAG,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE;AAAA,gBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAA,gBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,YANF,eAOE;AAAA,gBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAA,gBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,YARF,eASE;AAAA,gBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,YATF,eAUE;AAAA,gBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE;AAAA,gBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,YAXF,eAYE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA,KAAUR,IAAV;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAtGuBH,O;;KAAAA,O","sourcesContent":["import React, { useEffect, useRef, useContext } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\n\nexport default function CoinRow(props) {\n  const isMounted = useRef(false);\n  // console.log(props);\n  // const { name, price, percentChange, data } = props.coin;\n  const {\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr,\n    sparkline,\n  } = useContext(Context.coinData);\n\n  // useEffect(() => {\n  //   if (isMounted.current) {\n  //     const chart = createChart(document.querySelector(\".chart\"), {\n  //       width: 400,\n  //       height: 300,\n  //       rightPriceScale: {\n  //         visible: false,\n  //       },\n  //       grid: {\n  //         vertLines: {\n  //           visible: false,\n  //         },\n  //         horzLines: {\n  //           visible: false,\n  //         },\n  //       },\n  //       crosshair: {\n  //         vertLine: {\n  //           visible: false,\n  //         },\n  //         horzLine: {\n  //           visible: false,\n  //         },\n  //       },\n  //       layout: {\n  //         backgroundColor: \"tan\",\n  //       },\n  //       timeScale: { visible: false },\n  //       // borderColor: \"green\",\n  //       // timeVisible: false,\n  //       // priceScaleMode: percentChange,\n  //     });\n  //     //fits timescale to the content\n  //     chart.timeScale().fitContent();\n  //     const lineSeries = chart\n  //       .addLineSeries\n  //       //used to set y-axis scale (not quite sure exactly how it works)\n  //       //   {\n  //       //   autoscaleInfoProvider: () => ({\n  //       //     priceRange: {\n  //       //       minValue: 0,\n  //       //       maxValue: 100,\n  //       //     },\n  //       //   }),\n  //       // }\n  //       ();\n  //     lineSeries.applyOptions({\n  //       color: \"red\",\n\n  //       lineWidth: 5,\n  //       //crosshair dot\n  //       crosshairMarkerVisible: false,\n  //       //both of these are similar\n  //       lastValueVisible: false,\n  //       priceLineVisible: false,\n  //       //can make the series disapper (labels remain)\n  //       visible: true,\n  //       //\n  //     });\n  //     // const customFormatter = (time, tickMarkType, locale) => {\n  //     //   // tickMarkType: \"year\";\n  //     // };\n  //     lineSeries.setData(data);\n  //     //   window.addEventListener(\"resize\", handleResize);\n  //   } else {\n  //     isMounted.current = true;\n  //   }\n  // });\n\n  return (\n    <div key={rank}>\n      <div>{rank}</div>\n      <div>\n        <img src={image} alt=\"crypto-icon\"></img>\n      </div>\n      <div>{name}</div>\n      <div>{symbol}</div>\n      <div>{price}</div>\n      <div>{percentChange24hr}</div>\n      <div>{percentChange7d}</div>\n      <div>{marketCap}</div>\n      <div>{volume24hr}</div>\n      <div className=\"chart\"></div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}