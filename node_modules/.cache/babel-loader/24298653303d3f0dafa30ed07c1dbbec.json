{"ast":null,"code":"var _jsxFileName = \"/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/CoinRow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useContext } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CoinRow(props) {\n  _s();\n\n  const isMounted = useRef(false); // console.log(props);\n\n  const {\n    name,\n    price,\n    percentChange,\n    data\n  } = props.coin;\n  useEffect(() => {\n    if (isMounted.current) {\n      const chart = createChart(document.querySelector(\".chart\"), {\n        width: 400,\n        height: 300,\n        rightPriceScale: {\n          visible: false\n        },\n        grid: {\n          vertLines: {\n            visible: false\n          },\n          horzLines: {\n            visible: false\n          }\n        },\n        crosshair: {\n          vertLine: {\n            visible: false\n          },\n          horzLine: {\n            visible: false\n          }\n        },\n        layout: {\n          backgroundColor: \"tan\"\n        },\n        timeScale: {\n          visible: false\n        } // borderColor: \"green\",\n        // timeVisible: false,\n        // priceScaleMode: percentChange,\n\n      }); //fits timescale to the content\n\n      chart.timeScale().fitContent();\n      const lineSeries = chart.addLineSeries //used to set y-axis scale (not quite sure exactly how it works)\n      //   {\n      //   autoscaleInfoProvider: () => ({\n      //     priceRange: {\n      //       minValue: 0,\n      //       maxValue: 100,\n      //     },\n      //   }),\n      // }\n      ();\n      lineSeries.applyOptions({\n        color: \"red\",\n        lineWidth: 5,\n        //crosshair dot\n        crosshairMarkerVisible: false,\n        //both of these are similar\n        lastValueVisible: false,\n        priceLineVisible: false,\n        //can make the series disapper (labels remain)\n        visible: true //\n\n      }); // const customFormatter = (time, tickMarkType, locale) => {\n      //   // tickMarkType: \"year\";\n      // };\n\n      lineSeries.setData(data); //   window.addEventListener(\"resize\", handleResize);\n    } else {\n      isMounted.current = true;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: price\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: percentChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CoinRow, \"SkOohDVuXBk0DO6XXkvUZnCZ6So=\");\n\n_c = CoinRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinRow\");","map":{"version":3,"sources":["/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/CoinRow.js"],"names":["React","useEffect","useRef","useContext","Context","createChart","CoinRow","props","isMounted","name","price","percentChange","data","coin","current","chart","document","querySelector","width","height","rightPriceScale","visible","grid","vertLines","horzLines","crosshair","vertLine","horzLine","layout","backgroundColor","timeScale","fitContent","lineSeries","addLineSeries","applyOptions","color","lineWidth","crosshairMarkerVisible","lastValueVisible","priceLineVisible","setData"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,UAAnC,QAAqD,OAArD;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACrC,QAAMC,SAAS,GAAGN,MAAM,CAAC,KAAD,CAAxB,CADqC,CAErC;;AACA,QAAM;AAAEO,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,aAAf;AAA8BC,IAAAA;AAA9B,MAAuCL,KAAK,CAACM,IAAnD;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,SAAS,CAACM,OAAd,EAAuB;AACrB,YAAMC,KAAK,GAAGV,WAAW,CAACW,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAD,EAAmC;AAC1DC,QAAAA,KAAK,EAAE,GADmD;AAE1DC,QAAAA,MAAM,EAAE,GAFkD;AAG1DC,QAAAA,eAAe,EAAE;AACfC,UAAAA,OAAO,EAAE;AADM,SAHyC;AAM1DC,QAAAA,IAAI,EAAE;AACJC,UAAAA,SAAS,EAAE;AACTF,YAAAA,OAAO,EAAE;AADA,WADP;AAIJG,UAAAA,SAAS,EAAE;AACTH,YAAAA,OAAO,EAAE;AADA;AAJP,SANoD;AAc1DI,QAAAA,SAAS,EAAE;AACTC,UAAAA,QAAQ,EAAE;AACRL,YAAAA,OAAO,EAAE;AADD,WADD;AAITM,UAAAA,QAAQ,EAAE;AACRN,YAAAA,OAAO,EAAE;AADD;AAJD,SAd+C;AAsB1DO,QAAAA,MAAM,EAAE;AACNC,UAAAA,eAAe,EAAE;AADX,SAtBkD;AAyB1DC,QAAAA,SAAS,EAAE;AAAET,UAAAA,OAAO,EAAE;AAAX,SAzB+C,CA0B1D;AACA;AACA;;AA5B0D,OAAnC,CAAzB,CADqB,CA+BrB;;AACAN,MAAAA,KAAK,CAACe,SAAN,GAAkBC,UAAlB;AACA,YAAMC,UAAU,GAAGjB,KAAK,CACrBkB,aADgB,CAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAViB,QAAnB;AAYAD,MAAAA,UAAU,CAACE,YAAX,CAAwB;AACtBC,QAAAA,KAAK,EAAE,KADe;AAGtBC,QAAAA,SAAS,EAAE,CAHW;AAItB;AACAC,QAAAA,sBAAsB,EAAE,KALF;AAMtB;AACAC,QAAAA,gBAAgB,EAAE,KAPI;AAQtBC,QAAAA,gBAAgB,EAAE,KARI;AAStB;AACAlB,QAAAA,OAAO,EAAE,IAVa,CAWtB;;AAXsB,OAAxB,EA7CqB,CA0DrB;AACA;AACA;;AACAW,MAAAA,UAAU,CAACQ,OAAX,CAAmB5B,IAAnB,EA7DqB,CA8DrB;AACD,KA/DD,MA+DO;AACLJ,MAAAA,SAAS,CAACM,OAAV,GAAoB,IAApB;AACD;AACF,GAnEQ,CAAT;AAqEA,sBACE;AAAA,4BACE;AAAA,gBAAML;AAAN;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,gBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,KAAUF,IAAV;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAlFuBH,O;;KAAAA,O","sourcesContent":["import React, { useEffect, useRef, useContext } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\n\nexport default function CoinRow(props) {\n  const isMounted = useRef(false);\n  // console.log(props);\n  const { name, price, percentChange, data } = props.coin;\n\n  useEffect(() => {\n    if (isMounted.current) {\n      const chart = createChart(document.querySelector(\".chart\"), {\n        width: 400,\n        height: 300,\n        rightPriceScale: {\n          visible: false,\n        },\n        grid: {\n          vertLines: {\n            visible: false,\n          },\n          horzLines: {\n            visible: false,\n          },\n        },\n        crosshair: {\n          vertLine: {\n            visible: false,\n          },\n          horzLine: {\n            visible: false,\n          },\n        },\n        layout: {\n          backgroundColor: \"tan\",\n        },\n        timeScale: { visible: false },\n        // borderColor: \"green\",\n        // timeVisible: false,\n        // priceScaleMode: percentChange,\n      });\n      //fits timescale to the content\n      chart.timeScale().fitContent();\n      const lineSeries = chart\n        .addLineSeries\n        //used to set y-axis scale (not quite sure exactly how it works)\n        //   {\n        //   autoscaleInfoProvider: () => ({\n        //     priceRange: {\n        //       minValue: 0,\n        //       maxValue: 100,\n        //     },\n        //   }),\n        // }\n        ();\n      lineSeries.applyOptions({\n        color: \"red\",\n\n        lineWidth: 5,\n        //crosshair dot\n        crosshairMarkerVisible: false,\n        //both of these are similar\n        lastValueVisible: false,\n        priceLineVisible: false,\n        //can make the series disapper (labels remain)\n        visible: true,\n        //\n      });\n      // const customFormatter = (time, tickMarkType, locale) => {\n      //   // tickMarkType: \"year\";\n      // };\n      lineSeries.setData(data);\n      //   window.addEventListener(\"resize\", handleResize);\n    } else {\n      isMounted.current = true;\n    }\n  });\n\n  return (\n    <div key={name}>\n      <div>{name}</div>\n      <div>{price}</div>\n      <div>{percentChange}</div>\n      <div className=\"chart\"></div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}