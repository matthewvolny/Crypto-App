{"ast":null,"code":"var _jsxFileName = \"/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useRef } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport \"./chart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nmoment().format();\nexport default function Chart() {\n  _s();\n\n  // const { coinChartData } = useContext(Context);\n  const {\n    selectedCoinData\n  } = useContext(Context);\n  const [coinChartData, setCoinChartData] = useState();\n  const isMounted = useRef(false);\n  const {\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr\n  } = selectedCoinData;\n  const coinName = selectedCoinData.name;\n  useEffect(() => {\n    const coinLowercase = coinName.charAt(0).toLowerCase() + coinName.slice(1);\n    axios.get( //get single coin price\n    // \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\"\n    //!has converted prices for coins\n    //  'https://api.coingecko.com/api/v3/coins/bitcoin/tickers'\n    //!has description of the coin\n    //\"https://api.coingecko.com/api/v3/coins/bitcoin\"\n    //!historical price data (for max duration) for a particular coin\n    `https://api.coingecko.com/api/v3/coins/${coinLowercase}/market_chart?vs_currency=usd&days=1` //list all coins (tens of thousands)\n    // \"https://api.coingecko.com/api/v3/coins/list\"\n    //get market cap for a smattering of coins (not sure if all)\n    // \"https://api.coingecko.com/api/v3/global\"\n    //have a search bar for individual coins (could show only if it in the list of coins I am displaying), has market cap rank and images links\n    // \"https://api.coingecko.com/api/v3/search?query=bitcoin\"\n    //list of supported and currencies (not exactly sure what this means)\n    // \"https://api.coingecko.com/api/v3/simple/supported_vs_currencies\"\n    ).then(response => {\n      const data = response.data; // console.log(data);\n\n      const priceData = data.prices;\n      const priceDataArray = [];\n      priceData.forEach(priceArray => {\n        priceDataArray.push({\n          time: moment(priceArray[0]).format(\"MM/DD/YYYY\"),\n          value: priceArray[1]\n        });\n      });\n      const volumeData = data.total_volumes;\n      const volumeDataArray = [];\n      volumeData.forEach(volumeArray => {\n        volumeDataArray.push({\n          time: moment(volumeArray[0]).format(\"MM/DD/YYYY\"),\n          value: volumeArray[1]\n        });\n      });\n      setCoinChartData({\n        prices: priceDataArray,\n        volume: volumeDataArray\n      });\n    });\n  }, []);\n  useEffect(() => {\n    let chartElement = document.querySelector(\".tv-lightweight-charts\");\n\n    if (chartElement) {\n      console.log(\"here\");\n      chartElement.setAttribute(\"id\", \"chartElement\");\n    }\n  });\n  useEffect(() => {\n    if (isMounted.current) {\n      const chart = createChart(document.querySelector(\".chart\"), {\n        width: 500,\n        height: 400,\n        rightPriceScale: {\n          visible: true\n        },\n        grid: {\n          vertLines: {\n            visible: true\n          },\n          horzLines: {\n            visible: true\n          }\n        },\n        crosshair: {\n          vertLine: {\n            visible: true\n          },\n          horzLine: {\n            visible: true\n          }\n        },\n        layout: {\n          backgroundColor: \"white\"\n        },\n        timeScale: {\n          visible: true\n        } // borderColor: \"green\",\n        // timeVisible: false,\n        // priceScaleMode: percentChange,\n\n      }); //fits timescale to the content\n\n      chart.timeScale().fitContent();\n      const lineSeries = chart.addLineSeries //used to set y-axis scale (not quite sure exactly how it works)\n      //   {\n      //   autoscaleInfoProvider: () => ({\n      //     priceRange: {\n      //       minValue: 0,\n      //       maxValue: 100,\n      //     },\n      //   }),\n      // }\n      ();\n      lineSeries.applyOptions({\n        color: \"red\",\n        lineWidth: 4,\n        //crosshair dot\n        crosshairMarkerVisible: true,\n        //both of these are similar\n        lastValueVisible: true,\n        priceLineVisible: true,\n        //can make the series disapper (labels remain)\n        visible: true //\n\n      }); // const customFormatter = (time, tickMarkType, locale) => {\n      //   // tickMarkType: \"year\";\n      // };\n\n      lineSeries.setData(coinChartData.prices); //   window.addEventListener(\"resize\", handleResize);\n\n      const volumeSeries = chart.addHistogramSeries({\n        color: \"#26a69a\",\n        priceFormat: {\n          type: \"volume\"\n        },\n        priceScaleId: \"\",\n        scaleMargins: {\n          top: 0.8,\n          bottom: 0\n        }\n      }); //volume series\n\n      volumeSeries.setData(coinChartData.volume);\n    } else {\n      isMounted.current = true;\n    }\n  }, [coinChartData]);\n\n  const scaleGraphData = e => {\n    if (coinChartData.length > 1500 && e.target.value === \"all\") {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coin-details-flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"icon\",\n        src: image,\n        alt: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: symbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: rank\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"$\", price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [percentChange24hr, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: marketCap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: volume24hr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-with-controls-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"day\",\n          onClick: scaleGraphData,\n          children: \"Day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"week\",\n          onClick: scaleGraphData,\n          children: \"Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"month\",\n          onClick: scaleGraphData,\n          children: \"Month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"year\",\n          onClick: scaleGraphData,\n          children: \"Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"all\",\n          onClick: scaleGraphData,\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Chart, \"zuXAVCOy9FUPGhxtaNbnocCgCRM=\");\n\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/Chart.js"],"names":["React","useContext","useState","useEffect","useRef","Context","createChart","axios","moment","format","Chart","selectedCoinData","coinChartData","setCoinChartData","isMounted","rank","image","name","symbol","price","percentChange24hr","percentChange7d","marketCap","volume24hr","coinName","coinLowercase","charAt","toLowerCase","slice","get","then","response","data","priceData","prices","priceDataArray","forEach","priceArray","push","time","value","volumeData","total_volumes","volumeDataArray","volumeArray","volume","chartElement","document","querySelector","console","log","setAttribute","current","chart","width","height","rightPriceScale","visible","grid","vertLines","horzLines","crosshair","vertLine","horzLine","layout","backgroundColor","timeScale","fitContent","lineSeries","addLineSeries","applyOptions","color","lineWidth","crosshairMarkerVisible","lastValueVisible","priceLineVisible","setData","volumeSeries","addHistogramSeries","priceFormat","type","priceScaleId","scaleMargins","top","bottom","scaleGraphData","e","length","target"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport \"./chart.css\";\nmoment().format();\n\nexport default function Chart() {\n  // const { coinChartData } = useContext(Context);\n  const { selectedCoinData } = useContext(Context);\n  const [coinChartData, setCoinChartData] = useState();\n  const isMounted = useRef(false);\n\n  const {\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr,\n  } = selectedCoinData;\n\n  const coinName = selectedCoinData.name;\n  useEffect(() => {\n    const coinLowercase = coinName.charAt(0).toLowerCase() + coinName.slice(1);\n    axios\n      .get(\n        //get single coin price\n        // \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\"\n        //!has converted prices for coins\n        //  'https://api.coingecko.com/api/v3/coins/bitcoin/tickers'\n        //!has description of the coin\n        //\"https://api.coingecko.com/api/v3/coins/bitcoin\"\n        //!historical price data (for max duration) for a particular coin\n        `https://api.coingecko.com/api/v3/coins/${coinLowercase}/market_chart?vs_currency=usd&days=1`\n        //list all coins (tens of thousands)\n        // \"https://api.coingecko.com/api/v3/coins/list\"\n        //get market cap for a smattering of coins (not sure if all)\n        // \"https://api.coingecko.com/api/v3/global\"\n        //have a search bar for individual coins (could show only if it in the list of coins I am displaying), has market cap rank and images links\n        // \"https://api.coingecko.com/api/v3/search?query=bitcoin\"\n        //list of supported and currencies (not exactly sure what this means)\n        // \"https://api.coingecko.com/api/v3/simple/supported_vs_currencies\"\n      )\n      .then((response) => {\n        const data = response.data;\n        // console.log(data);\n        const priceData = data.prices;\n        const priceDataArray = [];\n        priceData.forEach((priceArray) => {\n          priceDataArray.push({\n            time: moment(priceArray[0]).format(\"MM/DD/YYYY\"),\n            value: priceArray[1],\n          });\n        });\n        const volumeData = data.total_volumes;\n        const volumeDataArray = [];\n        volumeData.forEach((volumeArray) => {\n          volumeDataArray.push({\n            time: moment(volumeArray[0]).format(\"MM/DD/YYYY\"),\n            value: volumeArray[1],\n          });\n        });\n        setCoinChartData({ prices: priceDataArray, volume: volumeDataArray });\n      });\n  }, []);\n\n  useEffect(() => {\n    let chartElement = document.querySelector(\".tv-lightweight-charts\");\n    if (chartElement) {\n      console.log(\"here\");\n      chartElement.setAttribute(\"id\", \"chartElement\");\n    }\n  });\n\n  useEffect(() => {\n    if (isMounted.current) {\n      const chart = createChart(document.querySelector(\".chart\"), {\n        width: 500,\n        height: 400,\n        rightPriceScale: {\n          visible: true,\n        },\n        grid: {\n          vertLines: {\n            visible: true,\n          },\n          horzLines: {\n            visible: true,\n          },\n        },\n        crosshair: {\n          vertLine: {\n            visible: true,\n          },\n          horzLine: {\n            visible: true,\n          },\n        },\n        layout: {\n          backgroundColor: \"white\",\n        },\n        timeScale: { visible: true },\n        // borderColor: \"green\",\n        // timeVisible: false,\n        // priceScaleMode: percentChange,\n      });\n      //fits timescale to the content\n      chart.timeScale().fitContent();\n\n      const lineSeries = chart\n        .addLineSeries\n        //used to set y-axis scale (not quite sure exactly how it works)\n        //   {\n        //   autoscaleInfoProvider: () => ({\n        //     priceRange: {\n        //       minValue: 0,\n        //       maxValue: 100,\n        //     },\n        //   }),\n        // }\n        ();\n      lineSeries.applyOptions({\n        color: \"red\",\n        lineWidth: 4,\n        //crosshair dot\n        crosshairMarkerVisible: true,\n        //both of these are similar\n        lastValueVisible: true,\n        priceLineVisible: true,\n        //can make the series disapper (labels remain)\n        visible: true,\n        //\n      });\n      // const customFormatter = (time, tickMarkType, locale) => {\n      //   // tickMarkType: \"year\";\n      // };\n      lineSeries.setData(coinChartData.prices);\n      //   window.addEventListener(\"resize\", handleResize);\n\n      const volumeSeries = chart.addHistogramSeries({\n        color: \"#26a69a\",\n        priceFormat: {\n          type: \"volume\",\n        },\n        priceScaleId: \"\",\n        scaleMargins: {\n          top: 0.8,\n          bottom: 0,\n        },\n      });\n      //volume series\n      volumeSeries.setData(coinChartData.volume);\n    } else {\n      isMounted.current = true;\n    }\n  }, [coinChartData]);\n\n  const scaleGraphData = (e) => {\n    if (coinChartData.length > 1500 && e.target.value === \"all\") {\n    }\n  };\n\n  return (\n    <>\n      <div className=\"coin-details-flex\">\n        <img className=\"icon\" src={image} alt=\"icon\" />\n        <div>{name}</div>\n        <div>{symbol}</div>\n        <div>{rank}</div>\n        <div>${price}</div>\n        <div>{percentChange24hr}%</div>\n        <div>{marketCap}</div>\n        <div>{volume24hr}</div>\n      </div>\n      <div className=\"chart-with-controls-container\">\n        <div className=\"chart-controls\">\n          <div value=\"day\" onClick={scaleGraphData}>\n            Day\n          </div>\n          <div value=\"week\" onClick={scaleGraphData}>\n            Week\n          </div>\n          <div value=\"month\" onClick={scaleGraphData}>\n            Month\n          </div>\n          <div value=\"year\" onClick={scaleGraphData}>\n            Year\n          </div>\n          <div value=\"all\" onClick={scaleGraphData}>\n            All\n          </div>\n        </div>\n        <div className=\"chart\"></div>\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}