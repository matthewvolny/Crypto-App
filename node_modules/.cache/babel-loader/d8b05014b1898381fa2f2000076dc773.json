{"ast":null,"code":"var _jsxFileName = \"/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/CoinRow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useContext, useEffect } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport { NavLink } from \"react-router-dom\";\nimport { Sparklines, SparklinesLine } from \"react-sparklines\";\nimport axios from \"axios\";\nimport \"./coinrow.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CoinRow(props) {\n  _s();\n\n  const [sparklineColor, setSparklineColor] = useState();\n  const {\n    setSelectedCoinData\n  } = useContext(Context);\n  const isMounted = useRef(false); // console.log(props);\n  // const { name, price, percentChange, data } = props.coin;\n\n  const {\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr,\n    sparkline\n  } = props.coin; // console.log(sparkline);\n  // const generateSparklineChartData = (sparklinePrices) => {\n  //   // console.log(sparklinePrices);\n  //   const sparklineDataArray = sparklinePrices.map((dataPoint, index) => {\n  //     console.log({ time: index, value: dataPoint });\n  //     return { time: index, value: dataPoint };\n  //   });\n  //   console.log(sparklineDataArray);\n  // };\n  // generateSparklineChartData(sparkline.price);\n\n  const data = [{\n    time: \"2019-04-11\",\n    value: 80.01\n  }, {\n    time: \"2019-04-12\",\n    value: 96.63\n  }, {\n    time: \"2019-04-13\",\n    value: 76.64\n  }, {\n    time: \"2019-04-14\",\n    value: 80.64\n  }, {\n    time: \"2019-04-15\",\n    value: 40.64\n  }, {\n    time: \"2019-04-16\",\n    value: 67.64\n  }, {\n    time: \"2019-04-17\",\n    value: 57.64\n  }]; // useEffect(() => {\n  //   if (isMounted.current) {\n  //     const chart = createChart(document.querySelector(\".chart\"), {\n  //       width: 100,\n  //       height: 75,\n  //       rightPriceScale: {\n  //         visible: false,\n  //       },\n  //       grid: {\n  //         vertLines: {\n  //           visible: false,\n  //         },\n  //         horzLines: {\n  //           visible: false,\n  //         },\n  //       },\n  //       crosshair: {\n  //         vertLine: {\n  //           visible: false,\n  //         },\n  //         horzLine: {\n  //           visible: false,\n  //         },\n  //       },\n  //       layout: {\n  //         backgroundColor: \"tan\",\n  //       },\n  //       timeScale: { visible: false },\n  //       // borderColor: \"green\",\n  //       // timeVisible: false,\n  //       // priceScaleMode: percentChange,\n  //     });\n  //     //fits timescale to the content\n  //     chart.timeScale().fitContent();\n  //     const lineSeries = chart\n  //       .addLineSeries\n  //       //used to set y-axis scale (not quite sure exactly how it works)\n  //       //   {\n  //       //   autoscaleInfoProvider: () => ({\n  //       //     priceRange: {\n  //       //       minValue: 0,\n  //       //       maxValue: 100,\n  //       //     },\n  //       //   }),\n  //       // }\n  //       ();\n  //     lineSeries.applyOptions({\n  //       color: \"red\",\n  //       lineWidth: 5,\n  //       //crosshair dot\n  //       crosshairMarkerVisible: false,\n  //       //both of these are similar\n  //       lastValueVisible: false,\n  //       priceLineVisible: false,\n  //       //can make the series disapper (labels remain)\n  //       visible: true,\n  //       //\n  //     });\n  //     // const customFormatter = (time, tickMarkType, locale) => {\n  //     //   // tickMarkType: \"year\";\n  //     // };\n  //     lineSeries.setData(data);\n  //     //   window.addEventListener(\"resize\", handleResize);\n  //   } else {\n  //     isMounted.current = true;\n  //   }\n  // });\n\n  const retrieveDetailedChartData = coin => {\n    console.log(coin);\n    axios.get( //get single coin price\n    // \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\"\n    //!has converted prices for coins\n    //  'https://api.coingecko.com/api/v3/coins/bitcoin/tickers'\n    //!has description of the coin\n    //\"https://api.coingecko.com/api/v3/coins/bitcoin\"\n    //!historical price data (for max duration) for a particular coin\n    `https://api.coingecko.com/api/v3/coins/${coin}/market_chart?vs_currency=usd&days=max` //list all coins (tens of thousands)\n    // \"https://api.coingecko.com/api/v3/coins/list\"\n    //get market cap for a smattering of coins (not sure if all)\n    // \"https://api.coingecko.com/api/v3/global\"\n    //have a search bar for individual coins (could show only if it in the list of coins I am displaying), has market cap rank and images links\n    // \"https://api.coingecko.com/api/v3/search?query=bitcoin\"\n    //list of supported and currencies (not exactly sure what this means)\n    // \"https://api.coingecko.com/api/v3/simple/supported_vs_currencies\"\n    ).then(response => {\n      const data = response.data;\n      console.log(data); // const coinDataArray = [];\n      // data.forEach((coin) => {\n      //   coinDataArray.push({\n      //     rank: coin.market_cap_rank,\n      //     image: coin.image,\n      //     name: coin.name,\n      //     symbol: coin.symbol,\n      //     price: coin.current_price.toLocaleString(\"en-US\"),\n      //     percentChange24hr:\n      //       coin.price_change_percentage_24h_in_currency.toFixed(2),\n      //     percentChange7d:\n      //       coin.price_change_percentage_7d_in_currency.toFixed(2),\n      //     marketCap: coin.market_cap.toLocaleString(\"en-US\"),\n      //     volume24hr: coin.total_volume.toLocaleString(\"en-US\"),\n      //     // sparkline: coin.sparkline_in_7d,\n      //     sparkline: roundSparklineData(coin.sparkline_in_7d),\n      //   });\n      // });\n      // console.log(coinDataArray);\n      // setCoinData(coinDataArray);\n    });\n  }; //colors sparkline chart based on 7d % change\n\n\n  useEffect(() => {\n    if (percentChange7d > 0) {\n      setSparklineColor(\"green\");\n    } else {\n      setSparklineColor(\"red\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"coin-row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: rank\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image,\n        alt: \"crypto-icon\",\n        className: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n      to: `/currencies/${name}`,\n      onClick: () => {\n        setSelectedCoinData(props.coin);\n        retrieveDetailedChartData(name);\n      },\n      children: name\n    }, rank, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: symbol\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"$\", price]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"percent-change\",\n      children: percentChange24hr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"percent-change\",\n      children: percentChange7d\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"$\", marketCap]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"$\", volume24hr]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sparklines // className=\"sparkline-container\"\n    , {\n      data: sparkline // width={100}\n      // height={20}\n      // margin={5}\n      ,\n      children: /*#__PURE__*/_jsxDEV(SparklinesLine, {\n        style: {\n          strokeWidth: 3,\n          stroke: sparklineColor,\n          fill: \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CoinRow, \"qlY2bdDI0MrDE7rNEmc4jpRJfMk=\");\n\n_c = CoinRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinRow\");","map":{"version":3,"sources":["/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/CoinRow.js"],"names":["React","useState","useRef","useContext","useEffect","Context","createChart","NavLink","Sparklines","SparklinesLine","axios","CoinRow","props","sparklineColor","setSparklineColor","setSelectedCoinData","isMounted","rank","image","name","symbol","price","percentChange24hr","percentChange7d","marketCap","volume24hr","sparkline","coin","data","time","value","retrieveDetailedChartData","console","log","get","then","response","strokeWidth","stroke","fill"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,UAAlC,EAA8CC,SAA9C,QAA+D,OAA/D;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,kBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,eAAP;;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACrC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,EAApD;AACA,QAAM;AAAEc,IAAAA;AAAF,MAA0BZ,UAAU,CAACE,OAAD,CAA1C;AACA,QAAMW,SAAS,GAAGd,MAAM,CAAC,KAAD,CAAxB,CAHqC,CAIrC;AACA;;AACA,QAAM;AACJe,IAAAA,IADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,IAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,KALI;AAMJC,IAAAA,iBANI;AAOJC,IAAAA,eAPI;AAQJC,IAAAA,SARI;AASJC,IAAAA,UATI;AAUJC,IAAAA;AAVI,MAWFd,KAAK,CAACe,IAXV,CANqC,CAkBrC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,QAAMC,IAAI,GAAG,CACX;AAAEC,IAAAA,IAAI,EAAE,YAAR;AAAsBC,IAAAA,KAAK,EAAE;AAA7B,GADW,EAEX;AAAED,IAAAA,IAAI,EAAE,YAAR;AAAsBC,IAAAA,KAAK,EAAE;AAA7B,GAFW,EAGX;AAAED,IAAAA,IAAI,EAAE,YAAR;AAAsBC,IAAAA,KAAK,EAAE;AAA7B,GAHW,EAIX;AAAED,IAAAA,IAAI,EAAE,YAAR;AAAsBC,IAAAA,KAAK,EAAE;AAA7B,GAJW,EAKX;AAAED,IAAAA,IAAI,EAAE,YAAR;AAAsBC,IAAAA,KAAK,EAAE;AAA7B,GALW,EAMX;AAAED,IAAAA,IAAI,EAAE,YAAR;AAAsBC,IAAAA,KAAK,EAAE;AAA7B,GANW,EAOX;AAAED,IAAAA,IAAI,EAAE,YAAR;AAAsBC,IAAAA,KAAK,EAAE;AAA7B,GAPW,CAAb,CA/BqC,CAyCrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,yBAAyB,GAAIJ,IAAD,IAAU;AAC1CK,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACAjB,IAAAA,KAAK,CACFwB,GADH,EAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACC,8CAAyCP,IAAK,wCATnD,CAUI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBJ,MAmBGQ,IAnBH,CAmBSC,QAAD,IAAc;AAClB,YAAMR,IAAI,GAAGQ,QAAQ,CAACR,IAAtB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAFkB,CAGlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KA1CH;AA2CD,GA7CD,CA9GqC,CA6JrC;;;AACAxB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,eAAe,GAAG,CAAtB,EAAyB;AACvBT,MAAAA,iBAAiB,CAAC,OAAD,CAAjB;AACD,KAFD,MAEO;AACLA,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD;AACF,GANQ,CAAT;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACE;AAAA,gBAAMG;AAAN;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE;AAAK,QAAA,GAAG,EAAEC,KAAV;AAAiB,QAAA,GAAG,EAAC,aAArB;AAAmC,QAAA,SAAS,EAAC;AAA7C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE,QAAC,OAAD;AACE,MAAA,EAAE,EAAG,eAAcC,IAAK,EAD1B;AAGE,MAAA,OAAO,EAAE,MAAM;AACbJ,QAAAA,mBAAmB,CAACH,KAAK,CAACe,IAAP,CAAnB;AACAI,QAAAA,yBAAyB,CAACZ,IAAD,CAAzB;AACD,OANH;AAAA,gBAQGA;AARH,OAEOF,IAFP;AAAA;AAAA;AAAA;AAAA,YALF,eAeE;AAAA,gBAAMG;AAAN;AAAA;AAAA;AAAA;AAAA,YAfF,eAgBE;AAAA,sBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBF,eAiBE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBAAiCC;AAAjC;AAAA;AAAA;AAAA;AAAA,YAjBF,eAkBE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBAAiCC;AAAjC;AAAA;AAAA;AAAA;AAAA,YAlBF,eAmBE;AAAA,sBAAOC,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBF,eAoBE;AAAA,sBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA,YApBF,eAsBE,QAAC,UAAD,CACE;AADF;AAEE,MAAA,IAAI,EAAEC,SAFR,CAGE;AACA;AACA;AALF;AAAA,6BAOE,QAAC,cAAD;AACE,QAAA,KAAK,EAAE;AAAEW,UAAAA,WAAW,EAAE,CAAf;AAAkBC,UAAAA,MAAM,EAAEzB,cAA1B;AAA0C0B,UAAAA,IAAI,EAAE;AAAhD;AADT;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,YAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD;;GA1MuB5B,O;;KAAAA,O","sourcesContent":["import React, { useState, useRef, useContext, useEffect } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport { NavLink } from \"react-router-dom\";\nimport { Sparklines, SparklinesLine } from \"react-sparklines\";\nimport axios from \"axios\";\nimport \"./coinrow.css\";\n\nexport default function CoinRow(props) {\n  const [sparklineColor, setSparklineColor] = useState();\n  const { setSelectedCoinData } = useContext(Context);\n  const isMounted = useRef(false);\n  // console.log(props);\n  // const { name, price, percentChange, data } = props.coin;\n  const {\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr,\n    sparkline,\n  } = props.coin;\n  // console.log(sparkline);\n\n  // const generateSparklineChartData = (sparklinePrices) => {\n  //   // console.log(sparklinePrices);\n  //   const sparklineDataArray = sparklinePrices.map((dataPoint, index) => {\n  //     console.log({ time: index, value: dataPoint });\n  //     return { time: index, value: dataPoint };\n  //   });\n  //   console.log(sparklineDataArray);\n  // };\n\n  // generateSparklineChartData(sparkline.price);\n\n  const data = [\n    { time: \"2019-04-11\", value: 80.01 },\n    { time: \"2019-04-12\", value: 96.63 },\n    { time: \"2019-04-13\", value: 76.64 },\n    { time: \"2019-04-14\", value: 80.64 },\n    { time: \"2019-04-15\", value: 40.64 },\n    { time: \"2019-04-16\", value: 67.64 },\n    { time: \"2019-04-17\", value: 57.64 },\n  ];\n\n  // useEffect(() => {\n  //   if (isMounted.current) {\n  //     const chart = createChart(document.querySelector(\".chart\"), {\n  //       width: 100,\n  //       height: 75,\n  //       rightPriceScale: {\n  //         visible: false,\n  //       },\n  //       grid: {\n  //         vertLines: {\n  //           visible: false,\n  //         },\n  //         horzLines: {\n  //           visible: false,\n  //         },\n  //       },\n  //       crosshair: {\n  //         vertLine: {\n  //           visible: false,\n  //         },\n  //         horzLine: {\n  //           visible: false,\n  //         },\n  //       },\n  //       layout: {\n  //         backgroundColor: \"tan\",\n  //       },\n  //       timeScale: { visible: false },\n  //       // borderColor: \"green\",\n  //       // timeVisible: false,\n  //       // priceScaleMode: percentChange,\n  //     });\n  //     //fits timescale to the content\n  //     chart.timeScale().fitContent();\n  //     const lineSeries = chart\n  //       .addLineSeries\n  //       //used to set y-axis scale (not quite sure exactly how it works)\n  //       //   {\n  //       //   autoscaleInfoProvider: () => ({\n  //       //     priceRange: {\n  //       //       minValue: 0,\n  //       //       maxValue: 100,\n  //       //     },\n  //       //   }),\n  //       // }\n  //       ();\n  //     lineSeries.applyOptions({\n  //       color: \"red\",\n\n  //       lineWidth: 5,\n  //       //crosshair dot\n  //       crosshairMarkerVisible: false,\n  //       //both of these are similar\n  //       lastValueVisible: false,\n  //       priceLineVisible: false,\n  //       //can make the series disapper (labels remain)\n  //       visible: true,\n  //       //\n  //     });\n  //     // const customFormatter = (time, tickMarkType, locale) => {\n  //     //   // tickMarkType: \"year\";\n  //     // };\n  //     lineSeries.setData(data);\n  //     //   window.addEventListener(\"resize\", handleResize);\n  //   } else {\n  //     isMounted.current = true;\n  //   }\n  // });\n\n  const retrieveDetailedChartData = (coin) => {\n    console.log(coin);\n    axios\n      .get(\n        //get single coin price\n        // \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\"\n        //!has converted prices for coins\n        //  'https://api.coingecko.com/api/v3/coins/bitcoin/tickers'\n        //!has description of the coin\n        //\"https://api.coingecko.com/api/v3/coins/bitcoin\"\n        //!historical price data (for max duration) for a particular coin\n        `https://api.coingecko.com/api/v3/coins/${coin}/market_chart?vs_currency=usd&days=max`\n        //list all coins (tens of thousands)\n        // \"https://api.coingecko.com/api/v3/coins/list\"\n        //get market cap for a smattering of coins (not sure if all)\n        // \"https://api.coingecko.com/api/v3/global\"\n        //have a search bar for individual coins (could show only if it in the list of coins I am displaying), has market cap rank and images links\n        // \"https://api.coingecko.com/api/v3/search?query=bitcoin\"\n        //list of supported and currencies (not exactly sure what this means)\n        // \"https://api.coingecko.com/api/v3/simple/supported_vs_currencies\"\n      )\n      .then((response) => {\n        const data = response.data;\n        console.log(data);\n        // const coinDataArray = [];\n        // data.forEach((coin) => {\n        //   coinDataArray.push({\n        //     rank: coin.market_cap_rank,\n        //     image: coin.image,\n        //     name: coin.name,\n        //     symbol: coin.symbol,\n        //     price: coin.current_price.toLocaleString(\"en-US\"),\n        //     percentChange24hr:\n        //       coin.price_change_percentage_24h_in_currency.toFixed(2),\n        //     percentChange7d:\n        //       coin.price_change_percentage_7d_in_currency.toFixed(2),\n        //     marketCap: coin.market_cap.toLocaleString(\"en-US\"),\n        //     volume24hr: coin.total_volume.toLocaleString(\"en-US\"),\n        //     // sparkline: coin.sparkline_in_7d,\n        //     sparkline: roundSparklineData(coin.sparkline_in_7d),\n        //   });\n        // });\n        // console.log(coinDataArray);\n        // setCoinData(coinDataArray);\n      });\n  };\n\n  //colors sparkline chart based on 7d % change\n  useEffect(() => {\n    if (percentChange7d > 0) {\n      setSparklineColor(\"green\");\n    } else {\n      setSparklineColor(\"red\");\n    }\n  });\n\n  return (\n    <div className=\"coin-row\">\n      <div>{rank}</div>\n      <div>\n        <img src={image} alt=\"crypto-icon\" className=\"icon\"></img>\n      </div>\n      <NavLink\n        to={`/currencies/${name}`}\n        key={rank}\n        onClick={() => {\n          setSelectedCoinData(props.coin);\n          retrieveDetailedChartData(name);\n        }}\n      >\n        {name}\n      </NavLink>\n      <div>{symbol}</div>\n      <div>${price}</div>\n      <div className=\"percent-change\">{percentChange24hr}</div>\n      <div className=\"percent-change\">{percentChange7d}</div>\n      <div>${marketCap}</div>\n      <div>${volume24hr}</div>\n      {/* <div className=\"chart\"></div> */}\n      <Sparklines\n        // className=\"sparkline-container\"\n        data={sparkline}\n        // width={100}\n        // height={20}\n        // margin={5}\n      >\n        <SparklinesLine\n          style={{ strokeWidth: 3, stroke: sparklineColor, fill: \"none\" }}\n        />\n      </Sparklines>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}