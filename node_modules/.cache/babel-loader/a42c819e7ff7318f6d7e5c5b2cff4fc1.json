{"ast":null,"code":"var _jsxFileName = \"/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useRef } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chart() {\n  _s();\n\n  // const { coinChartData } = useContext(Context);\n  const {\n    selectedCoinData\n  } = useContext(Context);\n  const [coinChartData, setCoinChartData] = useState();\n  const isMounted = useRef(false); // console.log(\"coinChartData\");\n  // console.log(coinChartData);\n  // useEffect(() => {\n  //   setData(coinChartData);\n  //   // console.log(data.prices);\n  // }, [coinChartData]);\n  // // console.log(coinChartData.prices);\n  // // const priceData = coinChartData.prices;\n  // // console.log(priceData);\n\n  const coinName = selectedCoinData.name;\n  useEffect(() => {\n    const coinLowercase = coinName.charAt(0).toLowerCase() + coinName.slice(1);\n    axios.get( //get single coin price\n    // \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\"\n    //!has converted prices for coins\n    //  'https://api.coingecko.com/api/v3/coins/bitcoin/tickers'\n    //!has description of the coin\n    //\"https://api.coingecko.com/api/v3/coins/bitcoin\"\n    //!historical price data (for max duration) for a particular coin\n    `https://api.coingecko.com/api/v3/coins/${coinLowercase}/market_chart?vs_currency=usd&days=max` //list all coins (tens of thousands)\n    // \"https://api.coingecko.com/api/v3/coins/list\"\n    //get market cap for a smattering of coins (not sure if all)\n    // \"https://api.coingecko.com/api/v3/global\"\n    //have a search bar for individual coins (could show only if it in the list of coins I am displaying), has market cap rank and images links\n    // \"https://api.coingecko.com/api/v3/search?query=bitcoin\"\n    //list of supported and currencies (not exactly sure what this means)\n    // \"https://api.coingecko.com/api/v3/simple/supported_vs_currencies\"\n    ).then(response => {\n      const data = response.data; // console.log(data);\n\n      const priceData = data.prices;\n      const priceDataArray = [];\n      priceData.forEach(priceArray => {\n        // console.log(priceArray);\n        priceDataArray.push({\n          time: priceArray[0],\n          //! convert from unix date here?\n          value: priceArray[1]\n        });\n      }); //!may want to make this (the volume data part)asyncronous (or the whole thing asynchronous), not sure\n\n      const volumeData = data.total_volumes;\n      const volumeDataArray = [];\n      volumeData.forEach(volumeArray => {\n        // console.log(priceArray);\n        volumeDataArray.push({\n          time: volumeArray[0],\n          //! convert from unix date here?\n          value: volumeArray[1]\n        });\n      }); // console.log(\" volume array\");\n      // console.log(volumeDataArray);\n\n      setCoinChartData({\n        prices: priceDataArray,\n        volume: volumeDataArray\n      });\n    });\n  }, []);\n  useEffect(() => {\n    if (isMounted.current) {\n      const chart = createChart(document.querySelector(\".chart\"), {\n        width: 500,\n        height: 450,\n        rightPriceScale: {\n          visible: true\n        },\n        grid: {\n          vertLines: {\n            visible: true\n          },\n          horzLines: {\n            visible: true\n          }\n        },\n        crosshair: {\n          vertLine: {\n            visible: true\n          },\n          horzLine: {\n            visible: true\n          }\n        },\n        layout: {\n          backgroundColor: \"white\"\n        },\n        timeScale: {\n          visible: true\n        } // borderColor: \"green\",\n        // timeVisible: false,\n        // priceScaleMode: percentChange,\n\n      }); //fits timescale to the content\n\n      chart.timeScale().fitContent();\n      const lineSeries = chart.addLineSeries //used to set y-axis scale (not quite sure exactly how it works)\n      //   {\n      //   autoscaleInfoProvider: () => ({\n      //     priceRange: {\n      //       minValue: 0,\n      //       maxValue: 100,\n      //     },\n      //   }),\n      // }\n      ();\n      lineSeries.applyOptions({\n        color: \"red\",\n        lineWidth: 4,\n        //crosshair dot\n        crosshairMarkerVisible: true,\n        //both of these are similar\n        lastValueVisible: false,\n        priceLineVisible: false,\n        //can make the series disapper (labels remain)\n        visible: true //\n\n      }); // const customFormatter = (time, tickMarkType, locale) => {\n      //   // tickMarkType: \"year\";\n      // };\n\n      lineSeries.setData(coinChartData.prices); //   window.addEventListener(\"resize\", handleResize);\n    } else {\n      isMounted.current = true;\n    }\n  }, [coinChartData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart\",\n    children: \"Chart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Chart, \"C5xSqAJs0fhKlF5Rb1pS/wyHzW8=\");\n\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/Chart.js"],"names":["React","useContext","useState","useEffect","useRef","Context","createChart","axios","Chart","selectedCoinData","coinChartData","setCoinChartData","isMounted","coinName","name","coinLowercase","charAt","toLowerCase","slice","get","then","response","data","priceData","prices","priceDataArray","forEach","priceArray","push","time","value","volumeData","total_volumes","volumeDataArray","volumeArray","volume","current","chart","document","querySelector","width","height","rightPriceScale","visible","grid","vertLines","horzLines","crosshair","vertLine","horzLine","layout","backgroundColor","timeScale","fitContent","lineSeries","addLineSeries","applyOptions","color","lineWidth","crosshairMarkerVisible","lastValueVisible","priceLineVisible","setData"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport axios from \"axios\";\n\nexport default function Chart() {\n  // const { coinChartData } = useContext(Context);\n  const { selectedCoinData } = useContext(Context);\n  const [coinChartData, setCoinChartData] = useState();\n  const isMounted = useRef(false);\n\n  // console.log(\"coinChartData\");\n  // console.log(coinChartData);\n\n  // useEffect(() => {\n  //   setData(coinChartData);\n  //   // console.log(data.prices);\n  // }, [coinChartData]);\n  // // console.log(coinChartData.prices);\n  // // const priceData = coinChartData.prices;\n  // // console.log(priceData);\n  const coinName = selectedCoinData.name;\n  useEffect(() => {\n    const coinLowercase = coinName.charAt(0).toLowerCase() + coinName.slice(1);\n    axios\n      .get(\n        //get single coin price\n        // \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\"\n        //!has converted prices for coins\n        //  'https://api.coingecko.com/api/v3/coins/bitcoin/tickers'\n        //!has description of the coin\n        //\"https://api.coingecko.com/api/v3/coins/bitcoin\"\n        //!historical price data (for max duration) for a particular coin\n        `https://api.coingecko.com/api/v3/coins/${coinLowercase}/market_chart?vs_currency=usd&days=max`\n        //list all coins (tens of thousands)\n        // \"https://api.coingecko.com/api/v3/coins/list\"\n        //get market cap for a smattering of coins (not sure if all)\n        // \"https://api.coingecko.com/api/v3/global\"\n        //have a search bar for individual coins (could show only if it in the list of coins I am displaying), has market cap rank and images links\n        // \"https://api.coingecko.com/api/v3/search?query=bitcoin\"\n        //list of supported and currencies (not exactly sure what this means)\n        // \"https://api.coingecko.com/api/v3/simple/supported_vs_currencies\"\n      )\n      .then((response) => {\n        const data = response.data;\n        // console.log(data);\n        const priceData = data.prices;\n        const priceDataArray = [];\n        priceData.forEach((priceArray) => {\n          // console.log(priceArray);\n          priceDataArray.push({\n            time: priceArray[0],\n            //! convert from unix date here?\n            value: priceArray[1],\n          });\n        });\n        //!may want to make this (the volume data part)asyncronous (or the whole thing asynchronous), not sure\n        const volumeData = data.total_volumes;\n        const volumeDataArray = [];\n        volumeData.forEach((volumeArray) => {\n          // console.log(priceArray);\n          volumeDataArray.push({\n            time: volumeArray[0],\n            //! convert from unix date here?\n            value: volumeArray[1],\n          });\n        });\n        // console.log(\" volume array\");\n        // console.log(volumeDataArray);\n        setCoinChartData({ prices: priceDataArray, volume: volumeDataArray });\n      });\n  }, []);\n\n  useEffect(() => {\n    if (isMounted.current) {\n      const chart = createChart(document.querySelector(\".chart\"), {\n        width: 500,\n        height: 450,\n        rightPriceScale: {\n          visible: true,\n        },\n        grid: {\n          vertLines: {\n            visible: true,\n          },\n          horzLines: {\n            visible: true,\n          },\n        },\n        crosshair: {\n          vertLine: {\n            visible: true,\n          },\n          horzLine: {\n            visible: true,\n          },\n        },\n        layout: {\n          backgroundColor: \"white\",\n        },\n        timeScale: { visible: true },\n        // borderColor: \"green\",\n        // timeVisible: false,\n        // priceScaleMode: percentChange,\n      });\n      //fits timescale to the content\n      chart.timeScale().fitContent();\n      const lineSeries = chart\n        .addLineSeries\n        //used to set y-axis scale (not quite sure exactly how it works)\n        //   {\n        //   autoscaleInfoProvider: () => ({\n        //     priceRange: {\n        //       minValue: 0,\n        //       maxValue: 100,\n        //     },\n        //   }),\n        // }\n        ();\n      lineSeries.applyOptions({\n        color: \"red\",\n\n        lineWidth: 4,\n        //crosshair dot\n        crosshairMarkerVisible: true,\n        //both of these are similar\n        lastValueVisible: false,\n        priceLineVisible: false,\n        //can make the series disapper (labels remain)\n        visible: true,\n        //\n      });\n      // const customFormatter = (time, tickMarkType, locale) => {\n      //   // tickMarkType: \"year\";\n      // };\n      lineSeries.setData(coinChartData.prices);\n      //   window.addEventListener(\"resize\", handleResize);\n    } else {\n      isMounted.current = true;\n    }\n  }, [coinChartData]);\n\n  return <div className=\"chart\">Chart</div>;\n}\n"]},"metadata":{},"sourceType":"module"}