{"ast":null,"code":"var _jsxFileName = \"/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/components/Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useRef } from \"react\";\nimport ChartControls from \"./ChartControls\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport \"./chart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nmoment().format();\nexport default function Chart() {\n  _s();\n\n  const {\n    selectedCoinData\n  } = useContext(Context);\n  const [coinChartData, setCoinChartData] = useState(); //!set viewfield duration back to 1\n\n  const [viewFieldDuration, setViewFieldDuration] = useState(\"1\");\n  const [timeFrameToFetch, setTimeFrameToFetch] = useState(\"90\");\n  const isMounted = useRef(false);\n  const isMountedTwo = useRef(false);\n  const prevTimeFrameToFetchRef = useRef(\"90\"); //global variables\n\n  const {\n    id,\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr\n  } = selectedCoinData;\n  const coinId = selectedCoinData.id;\n  let globalChart;\n  let globalLineSeries;\n  let globalVolumeSeries; //(2)retrieves price/volume data for for varying periods of time\n\n  const retrieveChartData = duration => {\n    const coinLowercase = coinId.charAt(0).toLowerCase() + coinId.slice(1);\n    axios.get(`https://api.coingecko.com/api/v3/coins/${coinLowercase}/market_chart?vs_currency=usd&days=${duration}`).then(response => {\n      const data = response.data;\n      console.log(\"fetched data\");\n      console.log(data); //formats \"price\" data based on whether it is in \"days\" or \"hrs\"\n\n      const priceData = data.prices;\n      const priceDataArray = [];\n\n      if (duration === \"max\") {\n        //if viewfield set to \"max\"\n        if (viewFieldDuration === \"max\") {\n          console.log(`data in \"week\" format`);\n\n          for (let i = priceData.length - 1; i >= 0; i--) {\n            if (i % 7 === 0) {\n              priceDataArray.push({\n                time: moment(priceData[i][0]).format(\"MM/DD/YYYY\"),\n                value: priceData[i][1].toFixed(4)\n              });\n            }\n          } // priceData.forEach((priceArray, index) => {\n          //   if (index % 7 === 0) {\n          //   }\n          //   priceDataArray.push({\n          //     time: moment(priceArray[0]).format(\"MM/DD/YYYY\"),\n          //     value: priceArray[1].toFixed(4),\n          //   });\n          // });\n\n        } else {\n          //if viewfield set to \"365\"\n          console.log(`data in \"day\" format`);\n          priceData.forEach(priceArray => {\n            priceDataArray.push({\n              time: moment(priceArray[0]).format(\"MM/DD/YYYY\"),\n              value: priceArray[1].toFixed(4)\n            });\n          });\n        }\n      } else {\n        // console.log(`price in \"hr\" format`);\n        priceData.forEach(priceArray => {\n          const unixDate = Math.floor(priceArray[0] / 1000);\n          const unixDateTZAdjusted = unixDate - 14400;\n          priceDataArray.push({\n            time: unixDateTZAdjusted,\n            value: priceArray[1].toFixed(4)\n          });\n        });\n      } //formats \"volume\" data based on whether it is in \"days\" or \"hrs\"\n\n\n      const volumeData = data.total_volumes;\n      const volumeDataArray = [];\n\n      if (duration === \"max\") {\n        console.log(`data in \"day\" format`);\n        volumeData.forEach(volumeArray => {\n          volumeDataArray.push({\n            time: moment(volumeArray[0]).format(\"MM/DD/YYYY\"),\n            value: volumeArray[1].toFixed(4)\n          });\n        });\n      } else {\n        // console.log(`volume in \"hr\" format`);\n        volumeData.forEach(volumeArray => {\n          const unixDate = Math.floor(volumeArray[0] / 1000);\n          const unixDateTZAdjusted = unixDate - 14400;\n          volumeDataArray.push({\n            time: unixDateTZAdjusted,\n            value: volumeArray[1].toFixed(4)\n          });\n        });\n      }\n\n      setCoinChartData({\n        prices: priceDataArray,\n        volume: volumeDataArray\n      });\n    });\n  }; //(1)calls function making API request for chart data, when  component rendered, coin selected, or \"timeframe\" for particular coin is changed (with button click)\n  //const isMounted = useRef(false);\n  //  if (isMounted.current) {\n  //     if (document.querySelector(\".tv-lightweight-charts\")) {\n  //       updateChartData(coinChartData);\n  //     } else {\n  //       renderChart(coinChartData);\n  //     }\n  //   } else {\n  //     isMounted.current = true;\n  //   }\n\n\n  useEffect(() => {\n    console.log(\"number 1\");\n    prevTimeFrameToFetchRef.current = timeFrameToFetch; //!can limit redundant calls here(i.e. repeated 30day calls)\n\n    retrieveChartData(timeFrameToFetch);\n  }, [selectedCoinData]); //(4a)renders the chart\n\n  const renderChart = coinChartData => {\n    console.log(coinChartData);\n    const chart = createChart(document.querySelector(\".chart\"), {\n      width: 500,\n      height: 400,\n      rightPriceScale: {\n        visible: true\n      },\n      grid: {\n        vertLines: {\n          visible: true\n        },\n        horzLines: {\n          visible: true\n        }\n      },\n      crosshair: {\n        vertLine: {\n          visible: true\n        },\n        horzLine: {\n          visible: true\n        }\n      },\n      layout: {\n        backgroundColor: \"white\"\n      },\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: true\n      } // localization: {\n      //   timeFormatter: (businessDayOrTimestamp) => {\n      //     if (chart.isBusinessDay(businessDayOrTimestamp)) {\n      //       return (\n      //         \"bd=\" +\n      //         businessDayOrTimestamp.day +\n      //         \"-\" +\n      //         businessDayOrTimestamp.month +\n      //         \"-\" +\n      //         businessDayOrTimestamp.year\n      //       );\n      //     }\n      //     return \"ts=\" + businessDayOrTimestamp;\n      //   },\n      // },\n\n    });\n    const lineSeries = chart.addLineSeries();\n    lineSeries.applyOptions({\n      color: \"red\",\n      lineWidth: 4,\n      crosshairMarkerVisible: true,\n      lastValueVisible: true,\n      priceLineVisible: true,\n      visible: true\n    }); // console.log(coinChartData.prices);\n\n    lineSeries.setData(coinChartData.prices);\n    const volumeSeries = chart.addHistogramSeries({\n      color: \"#26a69a\",\n      priceFormat: {\n        type: \"volume\"\n      },\n      priceScaleId: \"\",\n      scaleMargins: {\n        top: 0.8,\n        bottom: 0\n      }\n    }); // console.log(coinChartData.volume);\n\n    volumeSeries.setData(coinChartData.volume); // //!show values back to a given date\n\n    const todaysDate = new Date();\n    const todaysDateUnixTime = new Date(todaysDate).getTime() / 1000; // const todaysFormattedUnixDate = Math.floor(todaysDate / 1000);\n\n    switch (viewFieldDuration) {\n      case \"1\":\n        console.log(\"case 1\");\n        const twentyFourHoursPriorDate = todaysDateUnixTime - 86400; //!alternatively can show beginning of actual day (though this is more relevant for stocks, not crypto)\n        // todaysDate.setUTCHours(0, 0, 0, 0);\n        // const beginningOfDay = todaysDate.toUTCString();\n        // const beginningOfDayUnixTime =\n        //   new Date(beginningOfDay).getTime() / 1000;\n\n        chart.timeScale().setVisibleRange({\n          from: twentyFourHoursPriorDate,\n          to: todaysDateUnixTime\n        });\n        break;\n\n      case \"7\":\n        console.log(\"case 7\");\n        const sevenDaysPriorDate = todaysDateUnixTime - 604800;\n        chart.timeScale().setVisibleRange({\n          from: sevenDaysPriorDate,\n          to: todaysDateUnixTime\n        });\n        break;\n\n      case \"30\":\n        console.log(\"case 30\");\n        const oneMonthPriorDate = todaysDateUnixTime - 2592000;\n        chart.timeScale().setVisibleRange({\n          from: oneMonthPriorDate,\n          to: todaysDateUnixTime\n        });\n        break;\n\n      case \"365\":\n        console.log(\"case 365\"); // debugger;\n\n        const oneYearPriorDate = todaysDateUnixTime - 3.154e7;\n        chart.timeScale().setVisibleRange({\n          from: oneYearPriorDate,\n          to: todaysDateUnixTime\n        });\n        break;\n\n      case \"max\":\n        console.log(\"case max\");\n        chart.timeScale().fitContent();\n        break;\n\n      default: // code block\n\n    } //global variables used to update the chart (not currently being used)\n\n\n    globalChart = chart;\n    globalLineSeries = lineSeries;\n    globalVolumeSeries = volumeSeries;\n  }; //(4b)change chart data(two methods)\n\n\n  const updateChartData = newData => {\n    console.log(\"updateChart\");\n    console.log(newData); //!two approaches to replacing data in chart\n    //!(1)-delete chart\n\n    const previousChart = document.querySelector(\".tv-lightweight-charts\");\n    previousChart.remove();\n    renderChart(newData); // //!(2)-delete series (presumably faster(?), not sure)\n    // globalChart.removeSeries(globalLineSeries);\n    // const newLineSeries = globalChart.addLineSeries();\n    // newLineSeries.applyOptions({\n    //   color: \"red\",\n    //   lineWidth: 4,\n    //   crosshairMarkerVisible: true,\n    //   //!may or may not keep these two on\n    //   lastValueVisible: true,\n    //   priceLineVisible: true,\n    // });\n    // newLineSeries.setData(newData);\n    // //!very usefull, keeps all data in frame\n    // // globalChart.timeScale().fitContent();\n    // //!scrolls screen 5 days to the left (with or without animation) - may have limited utility, as moves right side as well\n    // //globalChart.timeScale().scrollToPosition(-5, true);\n    // //!show values back to a given date\n    // globalChart.timeScale().setVisibleRange({\n    //   //!can programmatically get various times in the past(1yr ago,  max, etc.) from: new Date(new Date().setFullYear(new Date().getFullYear() - 1)),\n    //   from: \"2018-12-17\",\n    //   //!most recent date (may be able to set this a little in the future to get more space)\n    //   to: new Date().toISOString().slice(0, 10),\n    //   //or this // to: Date.now() / 1000;\n    // });\n  }; //(3)renders a new chart or updates the current chart with new data (* this is (1) if chart is already rendered, as it updates chart on button click)\n\n\n  useEffect(() => {\n    if (isMounted.current) {\n      if (document.querySelector(\".tv-lightweight-charts\")) {\n        //!if user has clicked a different timeframe to fetch (i.e. 1year, or max)\n        if (prevTimeFrameToFetchRef.current !== timeFrameToFetch) {\n          retrieveChartData(timeFrameToFetch);\n          prevTimeFrameToFetchRef.current = timeFrameToFetch;\n        } else {\n          console.log(\"updateChartData\"); //deletes the chart before rendering\n\n          updateChartData(coinChartData);\n        }\n      } else {\n        renderChart(coinChartData);\n      }\n    } else {\n      isMounted.current = true;\n    }\n  }, [coinChartData, viewFieldDuration]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coin-details-flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"icon\",\n        src: image,\n        alt: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: symbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: rank\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"$\", price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [percentChange24hr, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: marketCap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: volume24hr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-with-controls-container\",\n      children: [/*#__PURE__*/_jsxDEV(ChartControls, {\n        setViewFieldDuration: setViewFieldDuration,\n        setTimeFrameToFetch: setTimeFrameToFetch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Chart, \"8JkiUHkb4wmyOvcCZxFObA4bPik=\");\n\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/components/Chart.js"],"names":["React","useContext","useState","useEffect","useRef","ChartControls","Context","createChart","axios","moment","format","Chart","selectedCoinData","coinChartData","setCoinChartData","viewFieldDuration","setViewFieldDuration","timeFrameToFetch","setTimeFrameToFetch","isMounted","isMountedTwo","prevTimeFrameToFetchRef","id","rank","image","name","symbol","price","percentChange24hr","percentChange7d","marketCap","volume24hr","coinId","globalChart","globalLineSeries","globalVolumeSeries","retrieveChartData","duration","coinLowercase","charAt","toLowerCase","slice","get","then","response","data","console","log","priceData","prices","priceDataArray","i","length","push","time","value","toFixed","forEach","priceArray","unixDate","Math","floor","unixDateTZAdjusted","volumeData","total_volumes","volumeDataArray","volumeArray","volume","current","renderChart","chart","document","querySelector","width","height","rightPriceScale","visible","grid","vertLines","horzLines","crosshair","vertLine","horzLine","layout","backgroundColor","timeScale","timeVisible","secondsVisible","lineSeries","addLineSeries","applyOptions","color","lineWidth","crosshairMarkerVisible","lastValueVisible","priceLineVisible","setData","volumeSeries","addHistogramSeries","priceFormat","type","priceScaleId","scaleMargins","top","bottom","todaysDate","Date","todaysDateUnixTime","getTime","twentyFourHoursPriorDate","setVisibleRange","from","to","sevenDaysPriorDate","oneMonthPriorDate","oneYearPriorDate","fitContent","updateChartData","newData","previousChart","remove"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,aAAP;;;AACAA,MAAM,GAAGC,MAAT;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAuBX,UAAU,CAACK,OAAD,CAAvC;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,EAAlD,CAF8B,CAG9B;;AACA,QAAM,CAACa,iBAAD,EAAoBC,oBAApB,IAA4Cd,QAAQ,CAAC,GAAD,CAA1D;AACA,QAAM,CAACe,gBAAD,EAAmBC,mBAAnB,IAA0ChB,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAMiB,SAAS,GAAGf,MAAM,CAAC,KAAD,CAAxB;AACA,QAAMgB,YAAY,GAAGhB,MAAM,CAAC,KAAD,CAA3B;AACA,QAAMiB,uBAAuB,GAAGjB,MAAM,CAAC,IAAD,CAAtC,CAR8B,CAU9B;;AACA,QAAM;AACJkB,IAAAA,EADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA,MALI;AAMJC,IAAAA,KANI;AAOJC,IAAAA,iBAPI;AAQJC,IAAAA,eARI;AASJC,IAAAA,SATI;AAUJC,IAAAA;AAVI,MAWFnB,gBAXJ;AAaA,QAAMoB,MAAM,GAAGpB,gBAAgB,CAACU,EAAhC;AACA,MAAIW,WAAJ;AACA,MAAIC,gBAAJ;AACA,MAAIC,kBAAJ,CA3B8B,CA6B9B;;AACA,QAAMC,iBAAiB,GAAIC,QAAD,IAAc;AACtC,UAAMC,aAAa,GAAGN,MAAM,CAACO,MAAP,CAAc,CAAd,EAAiBC,WAAjB,KAAiCR,MAAM,CAACS,KAAP,CAAa,CAAb,CAAvD;AACAjC,IAAAA,KAAK,CACFkC,GADH,CAEK,0CAAyCJ,aAAc,sCAAqCD,QAAS,EAF1G,EAIGM,IAJH,CAISC,QAAD,IAAc;AAClB,YAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAtB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAHkB,CAIlB;;AACA,YAAMG,SAAS,GAAGH,IAAI,CAACI,MAAvB;AACA,YAAMC,cAAc,GAAG,EAAvB;;AACA,UAAIb,QAAQ,KAAK,KAAjB,EAAwB;AACtB;AACA,YAAItB,iBAAiB,KAAK,KAA1B,EAAiC;AAC/B+B,UAAAA,OAAO,CAACC,GAAR,CAAa,uBAAb;;AACA,eAAK,IAAII,CAAC,GAAGH,SAAS,CAACI,MAAV,GAAmB,CAAhC,EAAmCD,CAAC,IAAI,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;AAC9C,gBAAIA,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACfD,cAAAA,cAAc,CAACG,IAAf,CAAoB;AAClBC,gBAAAA,IAAI,EAAE7C,MAAM,CAACuC,SAAS,CAACG,CAAD,CAAT,CAAa,CAAb,CAAD,CAAN,CAAwBzC,MAAxB,CAA+B,YAA/B,CADY;AAElB6C,gBAAAA,KAAK,EAAEP,SAAS,CAACG,CAAD,CAAT,CAAa,CAAb,EAAgBK,OAAhB,CAAwB,CAAxB;AAFW,eAApB;AAID;AACF,WAT8B,CAU/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,SAlBD,MAkBO;AACL;AACAV,UAAAA,OAAO,CAACC,GAAR,CAAa,sBAAb;AACAC,UAAAA,SAAS,CAACS,OAAV,CAAmBC,UAAD,IAAgB;AAChCR,YAAAA,cAAc,CAACG,IAAf,CAAoB;AAClBC,cAAAA,IAAI,EAAE7C,MAAM,CAACiD,UAAU,CAAC,CAAD,CAAX,CAAN,CAAsBhD,MAAtB,CAA6B,YAA7B,CADY;AAElB6C,cAAAA,KAAK,EAAEG,UAAU,CAAC,CAAD,CAAV,CAAcF,OAAd,CAAsB,CAAtB;AAFW,aAApB;AAID,WALD;AAMD;AACF,OA9BD,MA8BO;AACL;AACAR,QAAAA,SAAS,CAACS,OAAV,CAAmBC,UAAD,IAAgB;AAChC,gBAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,UAAU,CAAC,CAAD,CAAV,GAAgB,IAA3B,CAAjB;AACA,gBAAMI,kBAAkB,GAAGH,QAAQ,GAAG,KAAtC;AACAT,UAAAA,cAAc,CAACG,IAAf,CAAoB;AAClBC,YAAAA,IAAI,EAAEQ,kBADY;AAElBP,YAAAA,KAAK,EAAEG,UAAU,CAAC,CAAD,CAAV,CAAcF,OAAd,CAAsB,CAAtB;AAFW,WAApB;AAID,SAPD;AAQD,OA/CiB,CAgDlB;;;AACA,YAAMO,UAAU,GAAGlB,IAAI,CAACmB,aAAxB;AACA,YAAMC,eAAe,GAAG,EAAxB;;AACA,UAAI5B,QAAQ,KAAK,KAAjB,EAAwB;AACtBS,QAAAA,OAAO,CAACC,GAAR,CAAa,sBAAb;AACAgB,QAAAA,UAAU,CAACN,OAAX,CAAoBS,WAAD,IAAiB;AAClCD,UAAAA,eAAe,CAACZ,IAAhB,CAAqB;AACnBC,YAAAA,IAAI,EAAE7C,MAAM,CAACyD,WAAW,CAAC,CAAD,CAAZ,CAAN,CAAuBxD,MAAvB,CAA8B,YAA9B,CADa;AAEnB6C,YAAAA,KAAK,EAAEW,WAAW,CAAC,CAAD,CAAX,CAAeV,OAAf,CAAuB,CAAvB;AAFY,WAArB;AAID,SALD;AAMD,OARD,MAQO;AACL;AACAO,QAAAA,UAAU,CAACN,OAAX,CAAoBS,WAAD,IAAiB;AAClC,gBAAMP,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWK,WAAW,CAAC,CAAD,CAAX,GAAiB,IAA5B,CAAjB;AACA,gBAAMJ,kBAAkB,GAAGH,QAAQ,GAAG,KAAtC;AACAM,UAAAA,eAAe,CAACZ,IAAhB,CAAqB;AACnBC,YAAAA,IAAI,EAAEQ,kBADa;AAEnBP,YAAAA,KAAK,EAAEW,WAAW,CAAC,CAAD,CAAX,CAAeV,OAAf,CAAuB,CAAvB;AAFY,WAArB;AAID,SAPD;AAQD;;AACD1C,MAAAA,gBAAgB,CAAC;AAAEmC,QAAAA,MAAM,EAAEC,cAAV;AAA0BiB,QAAAA,MAAM,EAAEF;AAAlC,OAAD,CAAhB;AACD,KA3EH;AA4ED,GA9ED,CA9B8B,CA8G9B;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA9D,EAAAA,SAAS,CAAC,MAAM;AACd2C,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA1B,IAAAA,uBAAuB,CAAC+C,OAAxB,GAAkCnD,gBAAlC,CAFc,CAGd;;AACAmB,IAAAA,iBAAiB,CAACnB,gBAAD,CAAjB;AACD,GALQ,EAKN,CAACL,gBAAD,CALM,CAAT,CA5H8B,CAmI9B;;AACA,QAAMyD,WAAW,GAAIxD,aAAD,IAAmB;AACrCiC,IAAAA,OAAO,CAACC,GAAR,CAAYlC,aAAZ;AACA,UAAMyD,KAAK,GAAG/D,WAAW,CAACgE,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAD,EAAmC;AAC1DC,MAAAA,KAAK,EAAE,GADmD;AAE1DC,MAAAA,MAAM,EAAE,GAFkD;AAG1DC,MAAAA,eAAe,EAAE;AACfC,QAAAA,OAAO,EAAE;AADM,OAHyC;AAM1DC,MAAAA,IAAI,EAAE;AACJC,QAAAA,SAAS,EAAE;AACTF,UAAAA,OAAO,EAAE;AADA,SADP;AAIJG,QAAAA,SAAS,EAAE;AACTH,UAAAA,OAAO,EAAE;AADA;AAJP,OANoD;AAc1DI,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAE;AACRL,UAAAA,OAAO,EAAE;AADD,SADD;AAITM,QAAAA,QAAQ,EAAE;AACRN,UAAAA,OAAO,EAAE;AADD;AAJD,OAd+C;AAsB1DO,MAAAA,MAAM,EAAE;AACNC,QAAAA,eAAe,EAAE;AADX,OAtBkD;AAyB1DC,MAAAA,SAAS,EAAE;AACTC,QAAAA,WAAW,EAAE,IADJ;AAETC,QAAAA,cAAc,EAAE;AAFP,OAzB+C,CA6B1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AA5C0D,KAAnC,CAAzB;AA8CA,UAAMC,UAAU,GAAGlB,KAAK,CAACmB,aAAN,EAAnB;AACAD,IAAAA,UAAU,CAACE,YAAX,CAAwB;AACtBC,MAAAA,KAAK,EAAE,KADe;AAEtBC,MAAAA,SAAS,EAAE,CAFW;AAGtBC,MAAAA,sBAAsB,EAAE,IAHF;AAItBC,MAAAA,gBAAgB,EAAE,IAJI;AAKtBC,MAAAA,gBAAgB,EAAE,IALI;AAMtBnB,MAAAA,OAAO,EAAE;AANa,KAAxB,EAjDqC,CAyDrC;;AACAY,IAAAA,UAAU,CAACQ,OAAX,CAAmBnF,aAAa,CAACoC,MAAjC;AAEA,UAAMgD,YAAY,GAAG3B,KAAK,CAAC4B,kBAAN,CAAyB;AAC5CP,MAAAA,KAAK,EAAE,SADqC;AAE5CQ,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE;AADK,OAF+B;AAK5CC,MAAAA,YAAY,EAAE,EAL8B;AAM5CC,MAAAA,YAAY,EAAE;AACZC,QAAAA,GAAG,EAAE,GADO;AAEZC,QAAAA,MAAM,EAAE;AAFI;AAN8B,KAAzB,CAArB,CA5DqC,CAuErC;;AACAP,IAAAA,YAAY,CAACD,OAAb,CAAqBnF,aAAa,CAACsD,MAAnC,EAxEqC,CA0ErC;;AACA,UAAMsC,UAAU,GAAG,IAAIC,IAAJ,EAAnB;AACA,UAAMC,kBAAkB,GAAG,IAAID,IAAJ,CAASD,UAAT,EAAqBG,OAArB,KAAiC,IAA5D,CA5EqC,CA6ErC;;AACA,YAAQ7F,iBAAR;AACE,WAAK,GAAL;AACE+B,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,cAAM8D,wBAAwB,GAAGF,kBAAkB,GAAG,KAAtD,CAFF,CAGE;AACA;AACA;AACA;AACA;;AACArC,QAAAA,KAAK,CAACe,SAAN,GAAkByB,eAAlB,CAAkC;AAChCC,UAAAA,IAAI,EAAEF,wBAD0B;AAEhCG,UAAAA,EAAE,EAAEL;AAF4B,SAAlC;AAIA;;AACF,WAAK,GAAL;AACE7D,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,cAAMkE,kBAAkB,GAAGN,kBAAkB,GAAG,MAAhD;AACArC,QAAAA,KAAK,CAACe,SAAN,GAAkByB,eAAlB,CAAkC;AAChCC,UAAAA,IAAI,EAAEE,kBAD0B;AAEhCD,UAAAA,EAAE,EAAEL;AAF4B,SAAlC;AAIA;;AACF,WAAK,IAAL;AACE7D,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,cAAMmE,iBAAiB,GAAGP,kBAAkB,GAAG,OAA/C;AACArC,QAAAA,KAAK,CAACe,SAAN,GAAkByB,eAAlB,CAAkC;AAChCC,UAAAA,IAAI,EAAEG,iBAD0B;AAEhCF,UAAAA,EAAE,EAAEL;AAF4B,SAAlC;AAIA;;AACF,WAAK,KAAL;AACE7D,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EADF,CAEE;;AACA,cAAMoE,gBAAgB,GAAGR,kBAAkB,GAAG,OAA9C;AACArC,QAAAA,KAAK,CAACe,SAAN,GAAkByB,eAAlB,CAAkC;AAChCC,UAAAA,IAAI,EAAEI,gBAD0B;AAEhCH,UAAAA,EAAE,EAAEL;AAF4B,SAAlC;AAIA;;AACF,WAAK,KAAL;AACE7D,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAuB,QAAAA,KAAK,CAACe,SAAN,GAAkB+B,UAAlB;AACA;;AACF,cA3CF,CA4CE;;AA5CF,KA9EqC,CA4HrC;;;AACAnF,IAAAA,WAAW,GAAGqC,KAAd;AACApC,IAAAA,gBAAgB,GAAGsD,UAAnB;AACArD,IAAAA,kBAAkB,GAAG8D,YAArB;AACD,GAhID,CApI8B,CAsQ9B;;;AACA,QAAMoB,eAAe,GAAIC,OAAD,IAAa;AACnCxE,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYuE,OAAZ,EAFmC,CAGnC;AACA;;AACA,UAAMC,aAAa,GAAGhD,QAAQ,CAACC,aAAT,CAAuB,wBAAvB,CAAtB;AACA+C,IAAAA,aAAa,CAACC,MAAd;AACAnD,IAAAA,WAAW,CAACiD,OAAD,CAAX,CAPmC,CASnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAnCD,CAvQ8B,CA4S9B;;;AACAnH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,SAAS,CAACiD,OAAd,EAAuB;AACrB,UAAIG,QAAQ,CAACC,aAAT,CAAuB,wBAAvB,CAAJ,EAAsD;AACpD;AACA,YAAInD,uBAAuB,CAAC+C,OAAxB,KAAoCnD,gBAAxC,EAA0D;AACxDmB,UAAAA,iBAAiB,CAACnB,gBAAD,CAAjB;AACAI,UAAAA,uBAAuB,CAAC+C,OAAxB,GAAkCnD,gBAAlC;AACD,SAHD,MAGO;AACL6B,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EADK,CAEL;;AACAsE,UAAAA,eAAe,CAACxG,aAAD,CAAf;AACD;AACF,OAVD,MAUO;AACLwD,QAAAA,WAAW,CAACxD,aAAD,CAAX;AACD;AACF,KAdD,MAcO;AACLM,MAAAA,SAAS,CAACiD,OAAV,GAAoB,IAApB;AACD;AACF,GAlBQ,EAkBN,CAACvD,aAAD,EAAgBE,iBAAhB,CAlBM,CAAT;AAoBA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAsB,QAAA,GAAG,EAAES,KAA3B;AAAkC,QAAA,GAAG,EAAC;AAAtC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,kBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA,kBAAMH;AAAN;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA,wBAAOI,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAA,mBAAMC,iBAAN;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAOE;AAAA,kBAAME;AAAN;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE;AAAA,kBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAWE;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA,8BACE,QAAC,aAAD;AACE,QAAA,oBAAoB,EAAEf,oBADxB;AAEE,QAAA,mBAAmB,EAAEE;AAFvB;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA,kBADF;AAqBD;;GAtVuBP,K;;KAAAA,K","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport ChartControls from \"./ChartControls\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport \"./chart.css\";\nmoment().format();\n\nexport default function Chart() {\n  const { selectedCoinData } = useContext(Context);\n  const [coinChartData, setCoinChartData] = useState();\n  //!set viewfield duration back to 1\n  const [viewFieldDuration, setViewFieldDuration] = useState(\"1\");\n  const [timeFrameToFetch, setTimeFrameToFetch] = useState(\"90\");\n  const isMounted = useRef(false);\n  const isMountedTwo = useRef(false);\n  const prevTimeFrameToFetchRef = useRef(\"90\");\n\n  //global variables\n  const {\n    id,\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr,\n  } = selectedCoinData;\n\n  const coinId = selectedCoinData.id;\n  let globalChart;\n  let globalLineSeries;\n  let globalVolumeSeries;\n\n  //(2)retrieves price/volume data for for varying periods of time\n  const retrieveChartData = (duration) => {\n    const coinLowercase = coinId.charAt(0).toLowerCase() + coinId.slice(1);\n    axios\n      .get(\n        `https://api.coingecko.com/api/v3/coins/${coinLowercase}/market_chart?vs_currency=usd&days=${duration}`\n      )\n      .then((response) => {\n        const data = response.data;\n        console.log(\"fetched data\");\n        console.log(data);\n        //formats \"price\" data based on whether it is in \"days\" or \"hrs\"\n        const priceData = data.prices;\n        const priceDataArray = [];\n        if (duration === \"max\") {\n          //if viewfield set to \"max\"\n          if (viewFieldDuration === \"max\") {\n            console.log(`data in \"week\" format`);\n            for (let i = priceData.length - 1; i >= 0; i--) {\n              if (i % 7 === 0) {\n                priceDataArray.push({\n                  time: moment(priceData[i][0]).format(\"MM/DD/YYYY\"),\n                  value: priceData[i][1].toFixed(4),\n                });\n              }\n            }\n            // priceData.forEach((priceArray, index) => {\n            //   if (index % 7 === 0) {\n            //   }\n            //   priceDataArray.push({\n            //     time: moment(priceArray[0]).format(\"MM/DD/YYYY\"),\n            //     value: priceArray[1].toFixed(4),\n            //   });\n            // });\n          } else {\n            //if viewfield set to \"365\"\n            console.log(`data in \"day\" format`);\n            priceData.forEach((priceArray) => {\n              priceDataArray.push({\n                time: moment(priceArray[0]).format(\"MM/DD/YYYY\"),\n                value: priceArray[1].toFixed(4),\n              });\n            });\n          }\n        } else {\n          // console.log(`price in \"hr\" format`);\n          priceData.forEach((priceArray) => {\n            const unixDate = Math.floor(priceArray[0] / 1000);\n            const unixDateTZAdjusted = unixDate - 14400;\n            priceDataArray.push({\n              time: unixDateTZAdjusted,\n              value: priceArray[1].toFixed(4),\n            });\n          });\n        }\n        //formats \"volume\" data based on whether it is in \"days\" or \"hrs\"\n        const volumeData = data.total_volumes;\n        const volumeDataArray = [];\n        if (duration === \"max\") {\n          console.log(`data in \"day\" format`);\n          volumeData.forEach((volumeArray) => {\n            volumeDataArray.push({\n              time: moment(volumeArray[0]).format(\"MM/DD/YYYY\"),\n              value: volumeArray[1].toFixed(4),\n            });\n          });\n        } else {\n          // console.log(`volume in \"hr\" format`);\n          volumeData.forEach((volumeArray) => {\n            const unixDate = Math.floor(volumeArray[0] / 1000);\n            const unixDateTZAdjusted = unixDate - 14400;\n            volumeDataArray.push({\n              time: unixDateTZAdjusted,\n              value: volumeArray[1].toFixed(4),\n            });\n          });\n        }\n        setCoinChartData({ prices: priceDataArray, volume: volumeDataArray });\n      });\n  };\n\n  //(1)calls function making API request for chart data, when  component rendered, coin selected, or \"timeframe\" for particular coin is changed (with button click)\n\n  //const isMounted = useRef(false);\n\n  //  if (isMounted.current) {\n  //     if (document.querySelector(\".tv-lightweight-charts\")) {\n  //       updateChartData(coinChartData);\n  //     } else {\n  //       renderChart(coinChartData);\n  //     }\n  //   } else {\n  //     isMounted.current = true;\n  //   }\n\n  useEffect(() => {\n    console.log(\"number 1\");\n    prevTimeFrameToFetchRef.current = timeFrameToFetch;\n    //!can limit redundant calls here(i.e. repeated 30day calls)\n    retrieveChartData(timeFrameToFetch);\n  }, [selectedCoinData]);\n\n  //(4a)renders the chart\n  const renderChart = (coinChartData) => {\n    console.log(coinChartData);\n    const chart = createChart(document.querySelector(\".chart\"), {\n      width: 500,\n      height: 400,\n      rightPriceScale: {\n        visible: true,\n      },\n      grid: {\n        vertLines: {\n          visible: true,\n        },\n        horzLines: {\n          visible: true,\n        },\n      },\n      crosshair: {\n        vertLine: {\n          visible: true,\n        },\n        horzLine: {\n          visible: true,\n        },\n      },\n      layout: {\n        backgroundColor: \"white\",\n      },\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: true,\n      },\n      // localization: {\n      //   timeFormatter: (businessDayOrTimestamp) => {\n      //     if (chart.isBusinessDay(businessDayOrTimestamp)) {\n      //       return (\n      //         \"bd=\" +\n      //         businessDayOrTimestamp.day +\n      //         \"-\" +\n      //         businessDayOrTimestamp.month +\n      //         \"-\" +\n      //         businessDayOrTimestamp.year\n      //       );\n      //     }\n\n      //     return \"ts=\" + businessDayOrTimestamp;\n      //   },\n      // },\n    });\n    const lineSeries = chart.addLineSeries();\n    lineSeries.applyOptions({\n      color: \"red\",\n      lineWidth: 4,\n      crosshairMarkerVisible: true,\n      lastValueVisible: true,\n      priceLineVisible: true,\n      visible: true,\n    });\n    // console.log(coinChartData.prices);\n    lineSeries.setData(coinChartData.prices);\n\n    const volumeSeries = chart.addHistogramSeries({\n      color: \"#26a69a\",\n      priceFormat: {\n        type: \"volume\",\n      },\n      priceScaleId: \"\",\n      scaleMargins: {\n        top: 0.8,\n        bottom: 0,\n      },\n    });\n    // console.log(coinChartData.volume);\n    volumeSeries.setData(coinChartData.volume);\n\n    // //!show values back to a given date\n    const todaysDate = new Date();\n    const todaysDateUnixTime = new Date(todaysDate).getTime() / 1000;\n    // const todaysFormattedUnixDate = Math.floor(todaysDate / 1000);\n    switch (viewFieldDuration) {\n      case \"1\":\n        console.log(\"case 1\");\n        const twentyFourHoursPriorDate = todaysDateUnixTime - 86400;\n        //!alternatively can show beginning of actual day (though this is more relevant for stocks, not crypto)\n        // todaysDate.setUTCHours(0, 0, 0, 0);\n        // const beginningOfDay = todaysDate.toUTCString();\n        // const beginningOfDayUnixTime =\n        //   new Date(beginningOfDay).getTime() / 1000;\n        chart.timeScale().setVisibleRange({\n          from: twentyFourHoursPriorDate,\n          to: todaysDateUnixTime,\n        });\n        break;\n      case \"7\":\n        console.log(\"case 7\");\n        const sevenDaysPriorDate = todaysDateUnixTime - 604800;\n        chart.timeScale().setVisibleRange({\n          from: sevenDaysPriorDate,\n          to: todaysDateUnixTime,\n        });\n        break;\n      case \"30\":\n        console.log(\"case 30\");\n        const oneMonthPriorDate = todaysDateUnixTime - 2592000;\n        chart.timeScale().setVisibleRange({\n          from: oneMonthPriorDate,\n          to: todaysDateUnixTime,\n        });\n        break;\n      case \"365\":\n        console.log(\"case 365\");\n        // debugger;\n        const oneYearPriorDate = todaysDateUnixTime - 3.154e7;\n        chart.timeScale().setVisibleRange({\n          from: oneYearPriorDate,\n          to: todaysDateUnixTime,\n        });\n        break;\n      case \"max\":\n        console.log(\"case max\");\n        chart.timeScale().fitContent();\n        break;\n      default:\n      // code block\n    }\n    //global variables used to update the chart (not currently being used)\n    globalChart = chart;\n    globalLineSeries = lineSeries;\n    globalVolumeSeries = volumeSeries;\n  };\n\n  //(4b)change chart data(two methods)\n  const updateChartData = (newData) => {\n    console.log(\"updateChart\");\n    console.log(newData);\n    //!two approaches to replacing data in chart\n    //!(1)-delete chart\n    const previousChart = document.querySelector(\".tv-lightweight-charts\");\n    previousChart.remove();\n    renderChart(newData);\n\n    // //!(2)-delete series (presumably faster(?), not sure)\n    // globalChart.removeSeries(globalLineSeries);\n    // const newLineSeries = globalChart.addLineSeries();\n    // newLineSeries.applyOptions({\n    //   color: \"red\",\n    //   lineWidth: 4,\n    //   crosshairMarkerVisible: true,\n    //   //!may or may not keep these two on\n    //   lastValueVisible: true,\n    //   priceLineVisible: true,\n    // });\n    // newLineSeries.setData(newData);\n\n    // //!very usefull, keeps all data in frame\n    // // globalChart.timeScale().fitContent();\n\n    // //!scrolls screen 5 days to the left (with or without animation) - may have limited utility, as moves right side as well\n    // //globalChart.timeScale().scrollToPosition(-5, true);\n    // //!show values back to a given date\n    // globalChart.timeScale().setVisibleRange({\n    //   //!can programmatically get various times in the past(1yr ago,  max, etc.) from: new Date(new Date().setFullYear(new Date().getFullYear() - 1)),\n    //   from: \"2018-12-17\",\n    //   //!most recent date (may be able to set this a little in the future to get more space)\n    //   to: new Date().toISOString().slice(0, 10),\n    //   //or this // to: Date.now() / 1000;\n    // });\n  };\n\n  //(3)renders a new chart or updates the current chart with new data (* this is (1) if chart is already rendered, as it updates chart on button click)\n  useEffect(() => {\n    if (isMounted.current) {\n      if (document.querySelector(\".tv-lightweight-charts\")) {\n        //!if user has clicked a different timeframe to fetch (i.e. 1year, or max)\n        if (prevTimeFrameToFetchRef.current !== timeFrameToFetch) {\n          retrieveChartData(timeFrameToFetch);\n          prevTimeFrameToFetchRef.current = timeFrameToFetch;\n        } else {\n          console.log(\"updateChartData\");\n          //deletes the chart before rendering\n          updateChartData(coinChartData);\n        }\n      } else {\n        renderChart(coinChartData);\n      }\n    } else {\n      isMounted.current = true;\n    }\n  }, [coinChartData, viewFieldDuration]);\n\n  return (\n    <>\n      <div className=\"coin-details-flex\">\n        <img className=\"icon\" src={image} alt=\"icon\" />\n        <div>{name}</div>\n        <div>{symbol}</div>\n        <div>{rank}</div>\n        <div>${price}</div>\n        <div>{percentChange24hr}%</div>\n        <div>{marketCap}</div>\n        <div>{volume24hr}</div>\n      </div>\n      <div className=\"chart-with-controls-container\">\n        <ChartControls\n          setViewFieldDuration={setViewFieldDuration}\n          setTimeFrameToFetch={setTimeFrameToFetch}\n        />\n        <div className=\"chart\"></div>\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}