{"ast":null,"code":"var _jsxFileName = \"/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useRef } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chart() {\n  _s();\n\n  const {\n    coinChartData\n  } = useContext(Context);\n  const [data, setData] = useState();\n  const isMounted = useRef(false);\n  console.log(\"coinChartData\");\n  console.log(coinChartData);\n  useEffect(() => {\n    setData(coinChartData); // console.log(data.prices);\n  }, [coinChartData]); // console.log(coinChartData.prices);\n  // const priceData = coinChartData.prices;\n  // console.log(priceData);\n\n  const retrieveDetailedChartData = coin => {\n    const coinLowercase = coin.charAt(0).toLowerCase() + coin.slice(1);\n    axios.get( //get single coin price\n    // \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\"\n    //!has converted prices for coins\n    //  'https://api.coingecko.com/api/v3/coins/bitcoin/tickers'\n    //!has description of the coin\n    //\"https://api.coingecko.com/api/v3/coins/bitcoin\"\n    //!historical price data (for max duration) for a particular coin\n    `https://api.coingecko.com/api/v3/coins/${coinLowercase}/market_chart?vs_currency=usd&days=max` //list all coins (tens of thousands)\n    // \"https://api.coingecko.com/api/v3/coins/list\"\n    //get market cap for a smattering of coins (not sure if all)\n    // \"https://api.coingecko.com/api/v3/global\"\n    //have a search bar for individual coins (could show only if it in the list of coins I am displaying), has market cap rank and images links\n    // \"https://api.coingecko.com/api/v3/search?query=bitcoin\"\n    //list of supported and currencies (not exactly sure what this means)\n    // \"https://api.coingecko.com/api/v3/simple/supported_vs_currencies\"\n    ).then(response => {\n      const data = response.data; // console.log(data);\n\n      const priceData = data.prices;\n      const priceDataArray = [];\n      priceData.forEach(priceArray => {\n        // console.log(priceArray);\n        priceDataArray.push({\n          time: priceArray[0],\n          //! convert from unix date here?\n          value: priceArray[1]\n        });\n      }); //!may want to make this (the volume data part)asyncronous (or the whole thing asynchronous), not sure\n\n      const volumeData = data.total_volumes;\n      const volumeDataArray = [];\n      volumeData.forEach(volumeArray => {\n        // console.log(priceArray);\n        volumeDataArray.push({\n          time: volumeArray[0],\n          //! convert from unix date here?\n          value: volumeArray[1]\n        });\n      }); // console.log(\" volume array\");\n      // console.log(volumeDataArray);\n\n      setCoinChartData({\n        prices: priceDataArray,\n        volume: volumeDataArray\n      });\n    });\n  }; // useEffect(() => {\n  //   if (isMounted.current) {\n  //     const chart = createChart(document.querySelector(\".chart\"), {\n  //       width: 500,\n  //       height: 450,\n  //       rightPriceScale: {\n  //         visible: true,\n  //       },\n  //       grid: {\n  //         vertLines: {\n  //           visible: true,\n  //         },\n  //         horzLines: {\n  //           visible: true,\n  //         },\n  //       },\n  //       crosshair: {\n  //         vertLine: {\n  //           visible: true,\n  //         },\n  //         horzLine: {\n  //           visible: true,\n  //         },\n  //       },\n  //       layout: {\n  //         backgroundColor: \"white\",\n  //       },\n  //       timeScale: { visible: true },\n  //       // borderColor: \"green\",\n  //       // timeVisible: false,\n  //       // priceScaleMode: percentChange,\n  //     });\n  //     //fits timescale to the content\n  //     chart.timeScale().fitContent();\n  //     const lineSeries = chart\n  //       .addLineSeries\n  //       //used to set y-axis scale (not quite sure exactly how it works)\n  //       //   {\n  //       //   autoscaleInfoProvider: () => ({\n  //       //     priceRange: {\n  //       //       minValue: 0,\n  //       //       maxValue: 100,\n  //       //     },\n  //       //   }),\n  //       // }\n  //       ();\n  //     lineSeries.applyOptions({\n  //       color: \"red\",\n  //       lineWidth: 4,\n  //       //crosshair dot\n  //       crosshairMarkerVisible: true,\n  //       //both of these are similar\n  //       lastValueVisible: false,\n  //       priceLineVisible: false,\n  //       //can make the series disapper (labels remain)\n  //       visible: true,\n  //       //\n  //     });\n  //     // const customFormatter = (time, tickMarkType, locale) => {\n  //     //   // tickMarkType: \"year\";\n  //     // };\n  //     lineSeries.setData(data.prices);\n  //     //   window.addEventListener(\"resize\", handleResize);\n  //   } else {\n  //     isMounted.current = true;\n  //   }\n  // });\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart\",\n    children: \"Chart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Chart, \"dwQxni5g1HlLwvws8BBjrddCso8=\");\n\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/Chart.js"],"names":["React","useContext","useState","useEffect","useRef","Context","createChart","Chart","coinChartData","data","setData","isMounted","console","log","retrieveDetailedChartData","coin","coinLowercase","charAt","toLowerCase","slice","axios","get","then","response","priceData","prices","priceDataArray","forEach","priceArray","push","time","value","volumeData","total_volumes","volumeDataArray","volumeArray","setCoinChartData","volume"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAoBP,UAAU,CAACI,OAAD,CAApC;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,EAAhC;AACA,QAAMS,SAAS,GAAGP,MAAM,CAAC,KAAD,CAAxB;AAEAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYL,aAAZ;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,OAAO,CAACF,aAAD,CAAP,CADc,CAEd;AACD,GAHQ,EAGN,CAACA,aAAD,CAHM,CAAT,CAR8B,CAY9B;AACA;AACA;;AAEA,QAAMM,yBAAyB,GAAIC,IAAD,IAAU;AAC1C,UAAMC,aAAa,GAAGD,IAAI,CAACE,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BH,IAAI,CAACI,KAAL,CAAW,CAAX,CAArD;AACAC,IAAAA,KAAK,CACFC,GADH,EAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACC,8CAAyCL,aAAc,wCAT5D,CAUI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBJ,MAmBGM,IAnBH,CAmBSC,QAAD,IAAc;AAClB,YAAMd,IAAI,GAAGc,QAAQ,CAACd,IAAtB,CADkB,CAElB;;AACA,YAAMe,SAAS,GAAGf,IAAI,CAACgB,MAAvB;AACA,YAAMC,cAAc,GAAG,EAAvB;AACAF,MAAAA,SAAS,CAACG,OAAV,CAAmBC,UAAD,IAAgB;AAChC;AACAF,QAAAA,cAAc,CAACG,IAAf,CAAoB;AAClBC,UAAAA,IAAI,EAAEF,UAAU,CAAC,CAAD,CADE;AAElB;AACAG,UAAAA,KAAK,EAAEH,UAAU,CAAC,CAAD;AAHC,SAApB;AAKD,OAPD,EALkB,CAalB;;AACA,YAAMI,UAAU,GAAGvB,IAAI,CAACwB,aAAxB;AACA,YAAMC,eAAe,GAAG,EAAxB;AACAF,MAAAA,UAAU,CAACL,OAAX,CAAoBQ,WAAD,IAAiB;AAClC;AACAD,QAAAA,eAAe,CAACL,IAAhB,CAAqB;AACnBC,UAAAA,IAAI,EAAEK,WAAW,CAAC,CAAD,CADE;AAEnB;AACAJ,UAAAA,KAAK,EAAEI,WAAW,CAAC,CAAD;AAHC,SAArB;AAKD,OAPD,EAhBkB,CAwBlB;AACA;;AACAC,MAAAA,gBAAgB,CAAC;AAAEX,QAAAA,MAAM,EAAEC,cAAV;AAA0BW,QAAAA,MAAM,EAAEH;AAAlC,OAAD,CAAhB;AACD,KA9CH;AA+CD,GAjDD,CAhB8B,CAmE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBAAO;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAzIuB3B,K;;KAAAA,K","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\n\nexport default function Chart() {\n  const { coinChartData } = useContext(Context);\n  const [data, setData] = useState();\n  const isMounted = useRef(false);\n\n  console.log(\"coinChartData\");\n  console.log(coinChartData);\n\n  useEffect(() => {\n    setData(coinChartData);\n    // console.log(data.prices);\n  }, [coinChartData]);\n  // console.log(coinChartData.prices);\n  // const priceData = coinChartData.prices;\n  // console.log(priceData);\n\n  const retrieveDetailedChartData = (coin) => {\n    const coinLowercase = coin.charAt(0).toLowerCase() + coin.slice(1);\n    axios\n      .get(\n        //get single coin price\n        // \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\"\n        //!has converted prices for coins\n        //  'https://api.coingecko.com/api/v3/coins/bitcoin/tickers'\n        //!has description of the coin\n        //\"https://api.coingecko.com/api/v3/coins/bitcoin\"\n        //!historical price data (for max duration) for a particular coin\n        `https://api.coingecko.com/api/v3/coins/${coinLowercase}/market_chart?vs_currency=usd&days=max`\n        //list all coins (tens of thousands)\n        // \"https://api.coingecko.com/api/v3/coins/list\"\n        //get market cap for a smattering of coins (not sure if all)\n        // \"https://api.coingecko.com/api/v3/global\"\n        //have a search bar for individual coins (could show only if it in the list of coins I am displaying), has market cap rank and images links\n        // \"https://api.coingecko.com/api/v3/search?query=bitcoin\"\n        //list of supported and currencies (not exactly sure what this means)\n        // \"https://api.coingecko.com/api/v3/simple/supported_vs_currencies\"\n      )\n      .then((response) => {\n        const data = response.data;\n        // console.log(data);\n        const priceData = data.prices;\n        const priceDataArray = [];\n        priceData.forEach((priceArray) => {\n          // console.log(priceArray);\n          priceDataArray.push({\n            time: priceArray[0],\n            //! convert from unix date here?\n            value: priceArray[1],\n          });\n        });\n        //!may want to make this (the volume data part)asyncronous (or the whole thing asynchronous), not sure\n        const volumeData = data.total_volumes;\n        const volumeDataArray = [];\n        volumeData.forEach((volumeArray) => {\n          // console.log(priceArray);\n          volumeDataArray.push({\n            time: volumeArray[0],\n            //! convert from unix date here?\n            value: volumeArray[1],\n          });\n        });\n        // console.log(\" volume array\");\n        // console.log(volumeDataArray);\n        setCoinChartData({ prices: priceDataArray, volume: volumeDataArray });\n      });\n  };\n\n  // useEffect(() => {\n  //   if (isMounted.current) {\n  //     const chart = createChart(document.querySelector(\".chart\"), {\n  //       width: 500,\n  //       height: 450,\n  //       rightPriceScale: {\n  //         visible: true,\n  //       },\n  //       grid: {\n  //         vertLines: {\n  //           visible: true,\n  //         },\n  //         horzLines: {\n  //           visible: true,\n  //         },\n  //       },\n  //       crosshair: {\n  //         vertLine: {\n  //           visible: true,\n  //         },\n  //         horzLine: {\n  //           visible: true,\n  //         },\n  //       },\n  //       layout: {\n  //         backgroundColor: \"white\",\n  //       },\n  //       timeScale: { visible: true },\n  //       // borderColor: \"green\",\n  //       // timeVisible: false,\n  //       // priceScaleMode: percentChange,\n  //     });\n  //     //fits timescale to the content\n  //     chart.timeScale().fitContent();\n  //     const lineSeries = chart\n  //       .addLineSeries\n  //       //used to set y-axis scale (not quite sure exactly how it works)\n  //       //   {\n  //       //   autoscaleInfoProvider: () => ({\n  //       //     priceRange: {\n  //       //       minValue: 0,\n  //       //       maxValue: 100,\n  //       //     },\n  //       //   }),\n  //       // }\n  //       ();\n  //     lineSeries.applyOptions({\n  //       color: \"red\",\n\n  //       lineWidth: 4,\n  //       //crosshair dot\n  //       crosshairMarkerVisible: true,\n  //       //both of these are similar\n  //       lastValueVisible: false,\n  //       priceLineVisible: false,\n  //       //can make the series disapper (labels remain)\n  //       visible: true,\n  //       //\n  //     });\n  //     // const customFormatter = (time, tickMarkType, locale) => {\n  //     //   // tickMarkType: \"year\";\n  //     // };\n  //     lineSeries.setData(data.prices);\n  //     //   window.addEventListener(\"resize\", handleResize);\n  //   } else {\n  //     isMounted.current = true;\n  //   }\n  // });\n\n  return <div className=\"chart\">Chart</div>;\n}\n"]},"metadata":{},"sourceType":"module"}