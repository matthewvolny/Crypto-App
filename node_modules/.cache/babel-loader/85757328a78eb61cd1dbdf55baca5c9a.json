{"ast":null,"code":"var _jsxFileName = \"/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/Coinlist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { createChart } from \"lightweight-charts\";\nimport CoinRow from \"./CoinRow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chart() {\n  _s();\n\n  const isMounted = useRef(false);\n  const [coinData, setCoinData] = useState([{\n    name: \"Bitcoin\",\n    price: \"5000\",\n    percentChange: \"5\",\n    data: [{\n      time: \"2019-04-11\",\n      value: 80.01\n    }, {\n      time: \"2019-04-12\",\n      value: 96.63\n    }, {\n      time: \"2019-04-13\",\n      value: 76.64\n    }, {\n      time: \"2019-04-14\",\n      value: 80.64\n    }, {\n      time: \"2019-04-15\",\n      value: 40.64\n    }, {\n      time: \"2019-04-16\",\n      value: 67.64\n    }, {\n      time: \"2019-04-17\",\n      value: 57.64\n    }]\n  }]); // const coinRows = state.map((coin) => {\n  //   const randomNum = Math.floor(Math.random() * 10000);\n  //   return (\n  //     <div key={randomNum}>\n  //       <CoinRow name=\"bitcoin\" price=\"1000\" percentChange=\"5\" data={data} />;\n  //     </div>\n  //   );\n  // });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Top Polkadot Ecosystem Tokens by Market Capitalization This page lists the most valuable Polkadot based coins and tokens. These projects are listed by market capitalization with the largest first and then descending in order.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coinlist-table-headers\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Rank\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"24hr %\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"7d %\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Market Cap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Volume (24hr)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), coinData.map(coin => {\n      return /*#__PURE__*/_jsxDEV(CoinRow, {\n        coin: coin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 16\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chart, \"FR07bh0jguviG+nOvfiLyxbZzEk=\");\n\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/Coinlist.js"],"names":["React","useEffect","useRef","useState","createChart","CoinRow","Chart","isMounted","coinData","setCoinData","name","price","percentChange","data","time","value","map","coin"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,QAAMC,SAAS,GAAGL,MAAM,CAAC,KAAD,CAAxB;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,CACvC;AACEO,IAAAA,IAAI,EAAE,SADR;AAEEC,IAAAA,KAAK,EAAE,MAFT;AAGEC,IAAAA,aAAa,EAAE,GAHjB;AAIEC,IAAAA,IAAI,EAAE,CACJ;AAAEC,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KADI,EAEJ;AAAED,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KAFI,EAGJ;AAAED,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KAHI,EAIJ;AAAED,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KAJI,EAKJ;AAAED,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KALI,EAMJ;AAAED,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KANI,EAOJ;AAAED,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,KAAK,EAAE;AAA7B,KAPI;AAJR,GADuC,CAAD,CAAxC,CAF8B,CAmB9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,EAiBGP,QAAQ,CAACQ,GAAT,CAAcC,IAAD,IAAU;AACtB,0BAAO,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEA;AAAf;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFA,CAjBH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GAnDuBX,K;;KAAAA,K","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { createChart } from \"lightweight-charts\";\nimport CoinRow from \"./CoinRow\";\n\nexport default function Chart() {\n  const isMounted = useRef(false);\n  const [coinData, setCoinData] = useState([\n    {\n      name: \"Bitcoin\",\n      price: \"5000\",\n      percentChange: \"5\",\n      data: [\n        { time: \"2019-04-11\", value: 80.01 },\n        { time: \"2019-04-12\", value: 96.63 },\n        { time: \"2019-04-13\", value: 76.64 },\n        { time: \"2019-04-14\", value: 80.64 },\n        { time: \"2019-04-15\", value: 40.64 },\n        { time: \"2019-04-16\", value: 67.64 },\n        { time: \"2019-04-17\", value: 57.64 },\n      ],\n    },\n  ]);\n\n  // const coinRows = state.map((coin) => {\n  //   const randomNum = Math.floor(Math.random() * 10000);\n  //   return (\n  //     <div key={randomNum}>\n  //       <CoinRow name=\"bitcoin\" price=\"1000\" percentChange=\"5\" data={data} />;\n  //     </div>\n  //   );\n  // });\n\n  return (\n    <div>\n      <div>\n        Top Polkadot Ecosystem Tokens by Market Capitalization This page lists\n        the most valuable Polkadot based coins and tokens. These projects are\n        listed by market capitalization with the largest first and then\n        descending in order.\n      </div>\n      <div className=\"coinlist-table-headers\">\n        <div>Rank</div>\n        <div>Name</div>\n        <div>Price</div>\n        <div>24hr %</div>\n        <div>7d %</div>\n        <div>Market Cap</div>\n        <div>Volume (24hr)</div>\n      </div>\n      {/* {coinRows} */}\n      {coinData.map((coin) => {\n        return <CoinRow coin={coin} />;\n      })}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}