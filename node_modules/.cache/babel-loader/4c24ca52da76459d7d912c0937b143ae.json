{"ast":null,"code":"var _jsxFileName = \"/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/components/Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useRef } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport \"./chart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nmoment().format();\nexport default function Chart() {\n  _s();\n\n  // const { coinChartData } = useContext(Context);\n  const {\n    selectedCoinData\n  } = useContext(Context);\n  const [coinChartData, setCoinChartData] = useState();\n  const isMounted = useRef(false);\n  const isMountedTwo = useRef(false);\n  const {\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr\n  } = selectedCoinData;\n  const coinName = selectedCoinData.name; //fetch request to retrieve price/volume data for for varying periods of time\n\n  const retrieveChartData = duration => {\n    const coinLowercase = coinName.charAt(0).toLowerCase() + coinName.slice(1);\n    axios.get(`https://api.coingecko.com/api/v3/coins/${coinLowercase}/market_chart?vs_currency=usd&days=${duration}`).then(response => {\n      const data = response.data; // console.log(data);\n      //formats \"price\" data based on whether it is in \"days\" or \"hrs\"\n\n      const priceData = data.prices;\n      const priceDataArray = [];\n\n      if (\n      /*duration === \"365\" ||*/\n      duration === \"max\") {\n        console.log(`data in \"day\" format`);\n        priceData.forEach(priceArray => {\n          priceDataArray.push({\n            time: moment(priceArray[0]).format(\"MM/DD/YYYY\"),\n            value: priceArray[1].toFixed(4)\n          });\n        });\n      } else {\n        console.log(`data in \"hr\" format`);\n        priceData.forEach(priceArray => {\n          priceDataArray.push({\n            time: Math.floor(priceArray[0] / 1000),\n            value: priceArray[1].toFixed(4)\n          });\n        });\n      } //formats \"volume\" data based on whether it is in \"days\" or \"hrs\"\n\n\n      const volumeData = data.total_volumes;\n      const volumeDataArray = [];\n\n      if (\n      /*duration === \"365\" ||*/\n      duration === \"max\") {\n        volumeData.forEach(volumeArray => {\n          volumeDataArray.push({\n            time: moment(volumeArray[0]).format(\"MM/DD/YYYY\"),\n            value: volumeArray[1].toFixed(4)\n          });\n        });\n      } else {\n        volumeData.forEach(volumeArray => {\n          volumeDataArray.push({\n            time: Math.floor(volumeArray[0] / 1000),\n            value: volumeArray[1].toFixed(4)\n          });\n        });\n      }\n\n      setCoinChartData({\n        prices: priceDataArray,\n        volume: volumeDataArray\n      });\n    });\n  };\n\n  useEffect(() => {\n    retrieveChartData(\"1\");\n  }, [selectedCoinData]);\n  useEffect(() => {\n    if (isMounted.current) {\n      renderChart(data);\n    } else {\n      isMounted.current = true;\n    }\n  }, []);\n\n  const renderChart = data => {\n    const chart = createChart(document.querySelector(\".chart\"), {\n      width: 500,\n      height: 400,\n      rightPriceScale: {\n        visible: true\n      },\n      grid: {\n        vertLines: {\n          visible: true\n        },\n        horzLines: {\n          visible: true\n        }\n      },\n      crosshair: {\n        vertLine: {\n          visible: true\n        },\n        horzLine: {\n          visible: true\n        }\n      },\n      layout: {\n        backgroundColor: \"white\"\n      },\n      // timeScale: {\n      //   visible: true,\n      //   /*timeVisible: true secondsVisible: true,*/\n      // },\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: false //apparently minbarspacing allows you to fit more data on small chart\n        // minBarSpacing: 0.001,\n\n      } // borderColor: \"green\",\n      // timeVisible: false,\n      // priceScaleMode: percentChange,\n\n    }); //fits timescale to the content\n    // chart.timeScale().fitContent();\n    //\n    // chart\n    //   .timeScale()\n    //   .setVisibleLogicalRange({ from: 0, to: Date.now() / 1000 });\n\n    const lineSeries = chart.addLineSeries //used to set y-axis scale (not quite sure exactly how it works)\n    //   {\n    //   autoscaleInfoProvider: () => ({\n    //     priceRange: {\n    //       minValue: 0,\n    //       maxValue: 100,\n    //     },\n    //   }),\n    // }\n    ();\n    lineSeries.applyOptions({\n      color: \"red\",\n      lineWidth: 4,\n      //crosshair dot\n      crosshairMarkerVisible: true,\n      //both of these are similar\n      lastValueVisible: true,\n      priceLineVisible: true,\n      //can make the series disapper (labels remain)\n      visible: true //\n\n    }); // const customFormatter = (time, tickMarkType, locale) => {\n    //   // tickMarkType: \"year\";\n    // };\n\n    lineSeries.setData(coinChartData.prices); //   window.addEventListener(\"resize\", handleResize);\n\n    const volumeSeries = chart.addHistogramSeries({\n      color: \"#26a69a\",\n      priceFormat: {\n        type: \"volume\"\n      },\n      priceScaleId: \"\",\n      scaleMargins: {\n        top: 0.8,\n        bottom: 0\n      }\n    }); //volume series\n\n    volumeSeries.setData(coinChartData.volume);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coin-details-flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"icon\",\n        src: image,\n        alt: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: symbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: rank\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"$\", price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [percentChange24hr, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: marketCap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: volume24hr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-with-controls-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"day\",\n          onClick: () => {\n            retrieveChartData(\"30\");\n          },\n          children: \"Day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"week\",\n          onClick: () => {\n            retrieveChartData(\"30\");\n          },\n          children: \"Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"month\",\n          onClick: () => {\n            retrieveChartData(\"30\");\n          },\n          children: \"Month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"year\",\n          onClick: () => {\n            retrieveChartData(\"max\");\n          },\n          children: \"Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"all\",\n          onClick: () => {\n            retrieveChartData(\"max\");\n          },\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Chart, \"8ruS+PffWsgT/y1A5xIcxpbW6cI=\");\n\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/components/Chart.js"],"names":["React","useContext","useState","useEffect","useRef","Context","createChart","axios","moment","format","Chart","selectedCoinData","coinChartData","setCoinChartData","isMounted","isMountedTwo","rank","image","name","symbol","price","percentChange24hr","percentChange7d","marketCap","volume24hr","coinName","retrieveChartData","duration","coinLowercase","charAt","toLowerCase","slice","get","then","response","data","priceData","prices","priceDataArray","console","log","forEach","priceArray","push","time","value","toFixed","Math","floor","volumeData","total_volumes","volumeDataArray","volumeArray","volume","current","renderChart","chart","document","querySelector","width","height","rightPriceScale","visible","grid","vertLines","horzLines","crosshair","vertLine","horzLine","layout","backgroundColor","timeScale","timeVisible","secondsVisible","lineSeries","addLineSeries","applyOptions","color","lineWidth","crosshairMarkerVisible","lastValueVisible","priceLineVisible","setData","volumeSeries","addHistogramSeries","priceFormat","type","priceScaleId","scaleMargins","top","bottom"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport \"./chart.css\";\nmoment().format();\n\nexport default function Chart() {\n  // const { coinChartData } = useContext(Context);\n  const { selectedCoinData } = useContext(Context);\n  const [coinChartData, setCoinChartData] = useState();\n  const isMounted = useRef(false);\n  const isMountedTwo = useRef(false);\n\n  const {\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr,\n  } = selectedCoinData;\n  const coinName = selectedCoinData.name;\n\n  //fetch request to retrieve price/volume data for for varying periods of time\n  const retrieveChartData = (duration) => {\n    const coinLowercase = coinName.charAt(0).toLowerCase() + coinName.slice(1);\n    axios\n      .get(\n        `https://api.coingecko.com/api/v3/coins/${coinLowercase}/market_chart?vs_currency=usd&days=${duration}`\n      )\n      .then((response) => {\n        const data = response.data;\n        // console.log(data);\n        //formats \"price\" data based on whether it is in \"days\" or \"hrs\"\n        const priceData = data.prices;\n        const priceDataArray = [];\n        if (/*duration === \"365\" ||*/ duration === \"max\") {\n          console.log(`data in \"day\" format`);\n          priceData.forEach((priceArray) => {\n            priceDataArray.push({\n              time: moment(priceArray[0]).format(\"MM/DD/YYYY\"),\n              value: priceArray[1].toFixed(4),\n            });\n          });\n        } else {\n          console.log(`data in \"hr\" format`);\n          priceData.forEach((priceArray) => {\n            priceDataArray.push({\n              time: Math.floor(priceArray[0] / 1000),\n              value: priceArray[1].toFixed(4),\n            });\n          });\n        }\n        //formats \"volume\" data based on whether it is in \"days\" or \"hrs\"\n        const volumeData = data.total_volumes;\n        const volumeDataArray = [];\n        if (/*duration === \"365\" ||*/ duration === \"max\") {\n          volumeData.forEach((volumeArray) => {\n            volumeDataArray.push({\n              time: moment(volumeArray[0]).format(\"MM/DD/YYYY\"),\n              value: volumeArray[1].toFixed(4),\n            });\n          });\n        } else {\n          volumeData.forEach((volumeArray) => {\n            volumeDataArray.push({\n              time: Math.floor(volumeArray[0] / 1000),\n              value: volumeArray[1].toFixed(4),\n            });\n          });\n        }\n        setCoinChartData({ prices: priceDataArray, volume: volumeDataArray });\n      });\n  };\n\n  useEffect(() => {\n    retrieveChartData(\"1\");\n  }, [selectedCoinData]);\n\n  useEffect(() => {\n    if (isMounted.current) {\n      renderChart(data);\n    } else {\n      isMounted.current = true;\n    }\n  }, []);\n\n  const renderChart = (data) => {\n    const chart = createChart(document.querySelector(\".chart\"), {\n      width: 500,\n      height: 400,\n      rightPriceScale: {\n        visible: true,\n      },\n      grid: {\n        vertLines: {\n          visible: true,\n        },\n        horzLines: {\n          visible: true,\n        },\n      },\n      crosshair: {\n        vertLine: {\n          visible: true,\n        },\n        horzLine: {\n          visible: true,\n        },\n      },\n      layout: {\n        backgroundColor: \"white\",\n      },\n      // timeScale: {\n      //   visible: true,\n      //   /*timeVisible: true secondsVisible: true,*/\n      // },\n\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: false,\n        //apparently minbarspacing allows you to fit more data on small chart\n        // minBarSpacing: 0.001,\n      },\n      // borderColor: \"green\",\n      // timeVisible: false,\n      // priceScaleMode: percentChange,\n    });\n    //fits timescale to the content\n    // chart.timeScale().fitContent();\n    //\n    // chart\n    //   .timeScale()\n    //   .setVisibleLogicalRange({ from: 0, to: Date.now() / 1000 });\n    const lineSeries = chart\n      .addLineSeries\n      //used to set y-axis scale (not quite sure exactly how it works)\n      //   {\n      //   autoscaleInfoProvider: () => ({\n      //     priceRange: {\n      //       minValue: 0,\n      //       maxValue: 100,\n      //     },\n      //   }),\n      // }\n      ();\n    lineSeries.applyOptions({\n      color: \"red\",\n      lineWidth: 4,\n      //crosshair dot\n      crosshairMarkerVisible: true,\n      //both of these are similar\n      lastValueVisible: true,\n      priceLineVisible: true,\n      //can make the series disapper (labels remain)\n      visible: true,\n      //\n    });\n    // const customFormatter = (time, tickMarkType, locale) => {\n    //   // tickMarkType: \"year\";\n    // };\n    lineSeries.setData(coinChartData.prices);\n\n    //   window.addEventListener(\"resize\", handleResize);\n\n    const volumeSeries = chart.addHistogramSeries({\n      color: \"#26a69a\",\n      priceFormat: {\n        type: \"volume\",\n      },\n      priceScaleId: \"\",\n      scaleMargins: {\n        top: 0.8,\n        bottom: 0,\n      },\n    });\n    //volume series\n    volumeSeries.setData(coinChartData.volume);\n  };\n  return (\n    <>\n      <div className=\"coin-details-flex\">\n        <img className=\"icon\" src={image} alt=\"icon\" />\n        <div>{name}</div>\n        <div>{symbol}</div>\n        <div>{rank}</div>\n        <div>${price}</div>\n        <div>{percentChange24hr}%</div>\n        <div>{marketCap}</div>\n        <div>{volume24hr}</div>\n      </div>\n      <div className=\"chart-with-controls-container\">\n        <div className=\"chart-controls\">\n          <div\n            value=\"day\"\n            onClick={() => {\n              retrieveChartData(\"30\");\n            }}\n          >\n            Day\n          </div>\n          <div\n            value=\"week\"\n            onClick={() => {\n              retrieveChartData(\"30\");\n            }}\n          >\n            Week\n          </div>\n          <div\n            value=\"month\"\n            onClick={() => {\n              retrieveChartData(\"30\");\n            }}\n          >\n            Month\n          </div>\n          <div\n            value=\"year\"\n            onClick={() => {\n              retrieveChartData(\"max\");\n            }}\n          >\n            Year\n          </div>\n          <div\n            value=\"all\"\n            onClick={() => {\n              retrieveChartData(\"max\");\n            }}\n          >\n            All\n          </div>\n        </div>\n        <div className=\"chart\"></div>\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}