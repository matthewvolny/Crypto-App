{"ast":null,"code":"var _jsxFileName = \"/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useRef } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chart() {\n  _s();\n\n  const {\n    coinChartData\n  } = useContext(Context);\n  const [data, setData] = useState();\n  const isMounted = useRef(false);\n  console.log(\"coinChartData\");\n  console.log(coinChartData);\n  useEffect(() => {\n    setData(coinChartData); // console.log(data.prices);\n  }, [coinChartData]); // console.log(coinChartData.prices);\n  // const priceData = coinChartData.prices;\n  // console.log(priceData);\n\n  useEffect(() => {\n    if (isMounted.current) {\n      const chart = createChart(document.querySelector(\".chart\"), {\n        width: 700,\n        height: 450,\n        rightPriceScale: {\n          visible: true\n        },\n        grid: {\n          vertLines: {\n            visible: true\n          },\n          horzLines: {\n            visible: true\n          }\n        },\n        crosshair: {\n          vertLine: {\n            visible: true\n          },\n          horzLine: {\n            visible: true\n          }\n        },\n        layout: {\n          backgroundColor: \"white\"\n        },\n        timeScale: {\n          visible: true\n        } // borderColor: \"green\",\n        // timeVisible: false,\n        // priceScaleMode: percentChange,\n\n      }); //fits timescale to the content\n\n      chart.timeScale().fitContent();\n      const lineSeries = chart.addLineSeries //used to set y-axis scale (not quite sure exactly how it works)\n      //   {\n      //   autoscaleInfoProvider: () => ({\n      //     priceRange: {\n      //       minValue: 0,\n      //       maxValue: 100,\n      //     },\n      //   }),\n      // }\n      ();\n      lineSeries.applyOptions({\n        color: \"red\",\n        lineWidth: 4,\n        //crosshair dot\n        crosshairMarkerVisible: true,\n        //both of these are similar\n        lastValueVisible: false,\n        priceLineVisible: false,\n        //can make the series disapper (labels remain)\n        visible: true //\n\n      }); // const customFormatter = (time, tickMarkType, locale) => {\n      //   // tickMarkType: \"year\";\n      // };\n\n      lineSeries.setData(data.prices); //   window.addEventListener(\"resize\", handleResize);\n    } else {\n      isMounted.current = true;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart\",\n    children: \"Chart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Chart, \"Qvb5M7AA+Tb1rcbd4cWbnw/JHe4=\");\n\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/Chart.js"],"names":["React","useContext","useState","useEffect","useRef","Context","createChart","Chart","coinChartData","data","setData","isMounted","console","log","current","chart","document","querySelector","width","height","rightPriceScale","visible","grid","vertLines","horzLines","crosshair","vertLine","horzLine","layout","backgroundColor","timeScale","fitContent","lineSeries","addLineSeries","applyOptions","color","lineWidth","crosshairMarkerVisible","lastValueVisible","priceLineVisible","prices"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAoBP,UAAU,CAACI,OAAD,CAApC;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,EAAhC;AACA,QAAMS,SAAS,GAAGP,MAAM,CAAC,KAAD,CAAxB;AAEAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYL,aAAZ;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,OAAO,CAACF,aAAD,CAAP,CADc,CAEd;AACD,GAHQ,EAGN,CAACA,aAAD,CAHM,CAAT,CAR8B,CAY9B;AACA;AACA;;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,SAAS,CAACG,OAAd,EAAuB;AACrB,YAAMC,KAAK,GAAGT,WAAW,CAACU,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAD,EAAmC;AAC1DC,QAAAA,KAAK,EAAE,GADmD;AAE1DC,QAAAA,MAAM,EAAE,GAFkD;AAG1DC,QAAAA,eAAe,EAAE;AACfC,UAAAA,OAAO,EAAE;AADM,SAHyC;AAM1DC,QAAAA,IAAI,EAAE;AACJC,UAAAA,SAAS,EAAE;AACTF,YAAAA,OAAO,EAAE;AADA,WADP;AAIJG,UAAAA,SAAS,EAAE;AACTH,YAAAA,OAAO,EAAE;AADA;AAJP,SANoD;AAc1DI,QAAAA,SAAS,EAAE;AACTC,UAAAA,QAAQ,EAAE;AACRL,YAAAA,OAAO,EAAE;AADD,WADD;AAITM,UAAAA,QAAQ,EAAE;AACRN,YAAAA,OAAO,EAAE;AADD;AAJD,SAd+C;AAsB1DO,QAAAA,MAAM,EAAE;AACNC,UAAAA,eAAe,EAAE;AADX,SAtBkD;AAyB1DC,QAAAA,SAAS,EAAE;AAAET,UAAAA,OAAO,EAAE;AAAX,SAzB+C,CA0B1D;AACA;AACA;;AA5B0D,OAAnC,CAAzB,CADqB,CA+BrB;;AACAN,MAAAA,KAAK,CAACe,SAAN,GAAkBC,UAAlB;AACA,YAAMC,UAAU,GAAGjB,KAAK,CACrBkB,aADgB,CAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAViB,QAAnB;AAYAD,MAAAA,UAAU,CAACE,YAAX,CAAwB;AACtBC,QAAAA,KAAK,EAAE,KADe;AAGtBC,QAAAA,SAAS,EAAE,CAHW;AAItB;AACAC,QAAAA,sBAAsB,EAAE,IALF;AAMtB;AACAC,QAAAA,gBAAgB,EAAE,KAPI;AAQtBC,QAAAA,gBAAgB,EAAE,KARI;AAStB;AACAlB,QAAAA,OAAO,EAAE,IAVa,CAWtB;;AAXsB,OAAxB,EA7CqB,CA0DrB;AACA;AACA;;AACAW,MAAAA,UAAU,CAACtB,OAAX,CAAmBD,IAAI,CAAC+B,MAAxB,EA7DqB,CA8DrB;AACD,KA/DD,MA+DO;AACL7B,MAAAA,SAAS,CAACG,OAAV,GAAoB,IAApB;AACD;AACF,GAnEQ,CAAT;AAqEA,sBAAO;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAtFuBP,K;;KAAAA,K","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\n\nexport default function Chart() {\n  const { coinChartData } = useContext(Context);\n  const [data, setData] = useState();\n  const isMounted = useRef(false);\n\n  console.log(\"coinChartData\");\n  console.log(coinChartData);\n\n  useEffect(() => {\n    setData(coinChartData);\n    // console.log(data.prices);\n  }, [coinChartData]);\n  // console.log(coinChartData.prices);\n  // const priceData = coinChartData.prices;\n  // console.log(priceData);\n\n  useEffect(() => {\n    if (isMounted.current) {\n      const chart = createChart(document.querySelector(\".chart\"), {\n        width: 700,\n        height: 450,\n        rightPriceScale: {\n          visible: true,\n        },\n        grid: {\n          vertLines: {\n            visible: true,\n          },\n          horzLines: {\n            visible: true,\n          },\n        },\n        crosshair: {\n          vertLine: {\n            visible: true,\n          },\n          horzLine: {\n            visible: true,\n          },\n        },\n        layout: {\n          backgroundColor: \"white\",\n        },\n        timeScale: { visible: true },\n        // borderColor: \"green\",\n        // timeVisible: false,\n        // priceScaleMode: percentChange,\n      });\n      //fits timescale to the content\n      chart.timeScale().fitContent();\n      const lineSeries = chart\n        .addLineSeries\n        //used to set y-axis scale (not quite sure exactly how it works)\n        //   {\n        //   autoscaleInfoProvider: () => ({\n        //     priceRange: {\n        //       minValue: 0,\n        //       maxValue: 100,\n        //     },\n        //   }),\n        // }\n        ();\n      lineSeries.applyOptions({\n        color: \"red\",\n\n        lineWidth: 4,\n        //crosshair dot\n        crosshairMarkerVisible: true,\n        //both of these are similar\n        lastValueVisible: false,\n        priceLineVisible: false,\n        //can make the series disapper (labels remain)\n        visible: true,\n        //\n      });\n      // const customFormatter = (time, tickMarkType, locale) => {\n      //   // tickMarkType: \"year\";\n      // };\n      lineSeries.setData(data.prices);\n      //   window.addEventListener(\"resize\", handleResize);\n    } else {\n      isMounted.current = true;\n    }\n  });\n\n  return <div className=\"chart\">Chart</div>;\n}\n"]},"metadata":{},"sourceType":"module"}