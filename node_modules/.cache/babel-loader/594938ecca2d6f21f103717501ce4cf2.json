{"ast":null,"code":"var _jsxFileName = \"/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/components/Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useRef } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport \"./chart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nmoment().format();\nexport default function Chart() {\n  _s();\n\n  const {\n    selectedCoinData\n  } = useContext(Context);\n  const [coinChartData, setCoinChartData] = useState();\n  const [viewFieldDuration, setViewFieldDuration] = useState(\"1\");\n  const [timeframeToFetch, setTimeframeToFetch] = useState(\"90\");\n  const isMounted = useRef(false);\n  const isMountedTwo = useRef(false); //global variables\n\n  const {\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr\n  } = selectedCoinData;\n  const coinName = selectedCoinData.name;\n  let globalChart;\n  let globalLineSeries;\n  let globalVolumeSeries; //(2)retrieves price/volume data for for varying periods of time\n\n  const retrieveChartData = duration => {\n    const coinLowercase = coinName.charAt(0).toLowerCase() + coinName.slice(1);\n    axios.get(`https://api.coingecko.com/api/v3/coins/${coinLowercase}/market_chart?vs_currency=usd&days=${duration}`).then(response => {\n      const data = response.data; // console.log(data);\n      //formats \"price\" data based on whether it is in \"days\" or \"hrs\"\n\n      const priceData = data.prices;\n      const priceDataArray = [];\n\n      if (\n      /*duration === \"365\" ||*/\n      duration === \"max\") {\n        console.log(`data in \"day\" format`);\n        priceData.forEach(priceArray => {\n          priceDataArray.push({\n            time: moment(priceArray[0]).format(\"MM/DD/YYYY\"),\n            value: priceArray[1].toFixed(4)\n          });\n        });\n      } else {\n        console.log(`data in \"hr\" format`);\n        priceData.forEach(priceArray => {\n          priceDataArray.push({\n            time: Math.floor(priceArray[0] / 1000),\n            value: priceArray[1].toFixed(4)\n          });\n        });\n      } //formats \"volume\" data based on whether it is in \"days\" or \"hrs\"\n\n\n      const volumeData = data.total_volumes;\n      const volumeDataArray = [];\n\n      if (\n      /*duration === \"365\" ||*/\n      duration === \"max\") {\n        volumeData.forEach(volumeArray => {\n          volumeDataArray.push({\n            time: moment(volumeArray[0]).format(\"MM/DD/YYYY\"),\n            value: volumeArray[1].toFixed(4)\n          });\n        });\n      } else {\n        volumeData.forEach(volumeArray => {\n          volumeDataArray.push({\n            time: Math.floor(volumeArray[0] / 1000),\n            value: volumeArray[1].toFixed(4)\n          });\n        });\n      }\n\n      setCoinChartData({\n        prices: priceDataArray,\n        volume: volumeDataArray\n      });\n    });\n  }; //(1)calls function making API request for chart data, when  component rendered, coin selected, or \"timeframe\" for particular coin is changed (with button click)\n\n\n  useEffect(() => {\n    //!can limit redundant calls here(i.e. repeated 30day calls)\n    retrieveChartData(timeframeToFetch);\n  }, [selectedCoinData, timeframeToFetch]); //(4a)renders the chart\n\n  const renderChart = coinChartData => {\n    const chart = createChart(document.querySelector(\".chart\"), {\n      width: 500,\n      height: 400,\n      rightPriceScale: {\n        visible: true\n      },\n      grid: {\n        vertLines: {\n          visible: true\n        },\n        horzLines: {\n          visible: true\n        }\n      },\n      crosshair: {\n        vertLine: {\n          visible: true\n        },\n        horzLine: {\n          visible: true\n        }\n      },\n      layout: {\n        backgroundColor: \"white\"\n      },\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: false\n      }\n    });\n    const lineSeries = chart.addLineSeries();\n    lineSeries.applyOptions({\n      color: \"red\",\n      lineWidth: 4,\n      crosshairMarkerVisible: true,\n      lastValueVisible: true,\n      priceLineVisible: true,\n      visible: true\n    });\n    lineSeries.setData(coinChartData.prices);\n    const volumeSeries = chart.addHistogramSeries({\n      color: \"#26a69a\",\n      priceFormat: {\n        type: \"volume\"\n      },\n      priceScaleId: \"\",\n      scaleMargins: {\n        top: 0.8,\n        bottom: 0\n      }\n    });\n    volumeSeries.setData(coinChartData.volume);\n    globalChart = chart;\n    globalLineSeries = lineSeries;\n    globalVolumeSeries = volumeSeries; // //!show values back to a given date\n    //viewFieldDuration\n\n    switch (viewFieldDuration) {\n      case \"1\":\n        const date = Math.floor(new Date().getTime() / 1000); //unix time stamp for the current date/time\n\n        console.log(`date: ${date}`);\n        const yesterday = date - 86400;\n        console.log(`yesterday: ${yesterday}`);\n        chart.timeScale().setVisibleRange({\n          from: yesterday,\n          // from: yesterday.setDate(date.getDate() - 1),\n          to: date //! new Date().toLocaleDateString(),\n          // new Date().toISOString().slice(0, 10),\n          //or this // to: Date.now() / 1000;\n\n        });\n        break;\n\n      case \"7\":\n        // code block\n        break;\n\n      default: // code block\n\n    }\n  }; //(4b)change chart data(two methods)\n\n\n  const updateChartData = newData => {\n    //!two approaches to replacing data in chart\n    //!(1)-delete chart\n    const previousChart = document.querySelector(\".tv-lightweight-charts\");\n    previousChart.remove();\n    renderChart(newData); // //!(2)-delete series (presumably faster(?), not sure)\n    // globalChart.removeSeries(globalLineSeries);\n    // const newLineSeries = globalChart.addLineSeries();\n    // newLineSeries.applyOptions({\n    //   color: \"red\",\n    //   lineWidth: 4,\n    //   crosshairMarkerVisible: true,\n    //   //!may or may not keep these two on\n    //   lastValueVisible: true,\n    //   priceLineVisible: true,\n    // });\n    // newLineSeries.setData(newData);\n    // //!very usefull, keeps all data in frame\n    // // globalChart.timeScale().fitContent();\n    // //!scrolls screen 5 days to the left (with or without animation) - may have limited utility, as moves right side as well\n    // //globalChart.timeScale().scrollToPosition(-5, true);\n    // //!show values back to a given date\n    // globalChart.timeScale().setVisibleRange({\n    //   //!can programmatically get various times in the past(1yr ago,  max, etc.) from: new Date(new Date().setFullYear(new Date().getFullYear() - 1)),\n    //   from: \"2018-12-17\",\n    //   //!most recent date (may be able to set this a little in the future to get more space)\n    //   to: new Date().toISOString().slice(0, 10),\n    //   //or this // to: Date.now() / 1000;\n    // });\n  }; //(3)renders a new chart or updates the current chart with new data\n\n\n  useEffect(() => {\n    if (isMounted.current) {\n      if (document.querySelector(\".tv-lightweight-charts\")) {\n        updateChartData(coinChartData);\n      } else {\n        renderChart(coinChartData);\n      }\n    } else {\n      isMounted.current = true;\n    }\n  }, [coinChartData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coin-details-flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"icon\",\n        src: image,\n        alt: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: symbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: rank\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"$\", price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [percentChange24hr, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: marketCap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: volume24hr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-with-controls-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"day\",\n          onClick: () => {\n            setViewFieldDuration(\"1\");\n            setTimeframeToFetch(\"90\");\n          },\n          children: \"Day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"week\",\n          onClick: () => {\n            setViewFieldDuration(\"7\");\n            setTimeframeToFetch(\"90\");\n          },\n          children: \"Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"month\",\n          onClick: () => {\n            setViewFieldDuration(\"30\");\n            setTimeframeToFetch(\"90\");\n          },\n          children: \"Month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"year\",\n          onClick: () => {\n            setViewFieldDuration(\"365\");\n            setTimeframeToFetch(\"max\");\n          },\n          children: \"Year\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          value: \"all\",\n          onClick: () => {\n            setTimeframeToFetch(\"max\");\n            setTimeframeToFetch(\"max\");\n          },\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Chart, \"H3qkX4rGoF8eDNluJURMePTT7BI=\");\n\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/components/Chart.js"],"names":["React","useContext","useState","useEffect","useRef","Context","createChart","axios","moment","format","Chart","selectedCoinData","coinChartData","setCoinChartData","viewFieldDuration","setViewFieldDuration","timeframeToFetch","setTimeframeToFetch","isMounted","isMountedTwo","rank","image","name","symbol","price","percentChange24hr","percentChange7d","marketCap","volume24hr","coinName","globalChart","globalLineSeries","globalVolumeSeries","retrieveChartData","duration","coinLowercase","charAt","toLowerCase","slice","get","then","response","data","priceData","prices","priceDataArray","console","log","forEach","priceArray","push","time","value","toFixed","Math","floor","volumeData","total_volumes","volumeDataArray","volumeArray","volume","renderChart","chart","document","querySelector","width","height","rightPriceScale","visible","grid","vertLines","horzLines","crosshair","vertLine","horzLine","layout","backgroundColor","timeScale","timeVisible","secondsVisible","lineSeries","addLineSeries","applyOptions","color","lineWidth","crosshairMarkerVisible","lastValueVisible","priceLineVisible","setData","volumeSeries","addHistogramSeries","priceFormat","type","priceScaleId","scaleMargins","top","bottom","date","Date","getTime","yesterday","setVisibleRange","from","to","updateChartData","newData","previousChart","remove","current"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport \"./chart.css\";\nmoment().format();\n\nexport default function Chart() {\n  const { selectedCoinData } = useContext(Context);\n  const [coinChartData, setCoinChartData] = useState();\n  const [viewFieldDuration, setViewFieldDuration] = useState(\"1\");\n  const [timeframeToFetch, setTimeframeToFetch] = useState(\"90\");\n  const isMounted = useRef(false);\n  const isMountedTwo = useRef(false);\n\n  //global variables\n  const {\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr,\n  } = selectedCoinData;\n\n  const coinName = selectedCoinData.name;\n  let globalChart;\n  let globalLineSeries;\n  let globalVolumeSeries;\n\n  //(2)retrieves price/volume data for for varying periods of time\n  const retrieveChartData = (duration) => {\n    const coinLowercase = coinName.charAt(0).toLowerCase() + coinName.slice(1);\n    axios\n      .get(\n        `https://api.coingecko.com/api/v3/coins/${coinLowercase}/market_chart?vs_currency=usd&days=${duration}`\n      )\n      .then((response) => {\n        const data = response.data;\n        // console.log(data);\n        //formats \"price\" data based on whether it is in \"days\" or \"hrs\"\n        const priceData = data.prices;\n        const priceDataArray = [];\n        if (/*duration === \"365\" ||*/ duration === \"max\") {\n          console.log(`data in \"day\" format`);\n          priceData.forEach((priceArray) => {\n            priceDataArray.push({\n              time: moment(priceArray[0]).format(\"MM/DD/YYYY\"),\n              value: priceArray[1].toFixed(4),\n            });\n          });\n        } else {\n          console.log(`data in \"hr\" format`);\n          priceData.forEach((priceArray) => {\n            priceDataArray.push({\n              time: Math.floor(priceArray[0] / 1000),\n              value: priceArray[1].toFixed(4),\n            });\n          });\n        }\n        //formats \"volume\" data based on whether it is in \"days\" or \"hrs\"\n        const volumeData = data.total_volumes;\n        const volumeDataArray = [];\n        if (/*duration === \"365\" ||*/ duration === \"max\") {\n          volumeData.forEach((volumeArray) => {\n            volumeDataArray.push({\n              time: moment(volumeArray[0]).format(\"MM/DD/YYYY\"),\n              value: volumeArray[1].toFixed(4),\n            });\n          });\n        } else {\n          volumeData.forEach((volumeArray) => {\n            volumeDataArray.push({\n              time: Math.floor(volumeArray[0] / 1000),\n              value: volumeArray[1].toFixed(4),\n            });\n          });\n        }\n        setCoinChartData({ prices: priceDataArray, volume: volumeDataArray });\n      });\n  };\n\n  //(1)calls function making API request for chart data, when  component rendered, coin selected, or \"timeframe\" for particular coin is changed (with button click)\n  useEffect(() => {\n    //!can limit redundant calls here(i.e. repeated 30day calls)\n    retrieveChartData(timeframeToFetch);\n  }, [selectedCoinData, timeframeToFetch]);\n\n  //(4a)renders the chart\n  const renderChart = (coinChartData) => {\n    const chart = createChart(document.querySelector(\".chart\"), {\n      width: 500,\n      height: 400,\n      rightPriceScale: {\n        visible: true,\n      },\n      grid: {\n        vertLines: {\n          visible: true,\n        },\n        horzLines: {\n          visible: true,\n        },\n      },\n      crosshair: {\n        vertLine: {\n          visible: true,\n        },\n        horzLine: {\n          visible: true,\n        },\n      },\n      layout: {\n        backgroundColor: \"white\",\n      },\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: false,\n      },\n    });\n    const lineSeries = chart.addLineSeries();\n    lineSeries.applyOptions({\n      color: \"red\",\n      lineWidth: 4,\n      crosshairMarkerVisible: true,\n      lastValueVisible: true,\n      priceLineVisible: true,\n      visible: true,\n    });\n    lineSeries.setData(coinChartData.prices);\n    const volumeSeries = chart.addHistogramSeries({\n      color: \"#26a69a\",\n      priceFormat: {\n        type: \"volume\",\n      },\n      priceScaleId: \"\",\n      scaleMargins: {\n        top: 0.8,\n        bottom: 0,\n      },\n    });\n    volumeSeries.setData(coinChartData.volume);\n    globalChart = chart;\n    globalLineSeries = lineSeries;\n    globalVolumeSeries = volumeSeries;\n    // //!show values back to a given date\n    //viewFieldDuration\n\n    switch (viewFieldDuration) {\n      case \"1\":\n        const date = Math.floor(new Date().getTime() / 1000); //unix time stamp for the current date/time\n        console.log(`date: ${date}`);\n        const yesterday = date - 86400;\n        console.log(`yesterday: ${yesterday}`);\n        chart.timeScale().setVisibleRange({\n          from: yesterday,\n          // from: yesterday.setDate(date.getDate() - 1),\n          to: date,\n          //! new Date().toLocaleDateString(),\n          // new Date().toISOString().slice(0, 10),\n          //or this // to: Date.now() / 1000;\n        });\n        break;\n      case \"7\":\n        // code block\n        break;\n      default:\n      // code block\n    }\n  };\n\n  //(4b)change chart data(two methods)\n  const updateChartData = (newData) => {\n    //!two approaches to replacing data in chart\n    //!(1)-delete chart\n    const previousChart = document.querySelector(\".tv-lightweight-charts\");\n    previousChart.remove();\n    renderChart(newData);\n\n    // //!(2)-delete series (presumably faster(?), not sure)\n    // globalChart.removeSeries(globalLineSeries);\n    // const newLineSeries = globalChart.addLineSeries();\n    // newLineSeries.applyOptions({\n    //   color: \"red\",\n    //   lineWidth: 4,\n    //   crosshairMarkerVisible: true,\n    //   //!may or may not keep these two on\n    //   lastValueVisible: true,\n    //   priceLineVisible: true,\n    // });\n    // newLineSeries.setData(newData);\n\n    // //!very usefull, keeps all data in frame\n    // // globalChart.timeScale().fitContent();\n\n    // //!scrolls screen 5 days to the left (with or without animation) - may have limited utility, as moves right side as well\n    // //globalChart.timeScale().scrollToPosition(-5, true);\n    // //!show values back to a given date\n    // globalChart.timeScale().setVisibleRange({\n    //   //!can programmatically get various times in the past(1yr ago,  max, etc.) from: new Date(new Date().setFullYear(new Date().getFullYear() - 1)),\n    //   from: \"2018-12-17\",\n    //   //!most recent date (may be able to set this a little in the future to get more space)\n    //   to: new Date().toISOString().slice(0, 10),\n    //   //or this // to: Date.now() / 1000;\n    // });\n  };\n\n  //(3)renders a new chart or updates the current chart with new data\n  useEffect(() => {\n    if (isMounted.current) {\n      if (document.querySelector(\".tv-lightweight-charts\")) {\n        updateChartData(coinChartData);\n      } else {\n        renderChart(coinChartData);\n      }\n    } else {\n      isMounted.current = true;\n    }\n  }, [coinChartData]);\n\n  return (\n    <>\n      <div className=\"coin-details-flex\">\n        <img className=\"icon\" src={image} alt=\"icon\" />\n        <div>{name}</div>\n        <div>{symbol}</div>\n        <div>{rank}</div>\n        <div>${price}</div>\n        <div>{percentChange24hr}%</div>\n        <div>{marketCap}</div>\n        <div>{volume24hr}</div>\n      </div>\n      <div className=\"chart-with-controls-container\">\n        <div className=\"chart-controls\">\n          <div\n            value=\"day\"\n            onClick={() => {\n              setViewFieldDuration(\"1\");\n              setTimeframeToFetch(\"90\");\n            }}\n          >\n            Day\n          </div>\n          <div\n            value=\"week\"\n            onClick={() => {\n              setViewFieldDuration(\"7\");\n              setTimeframeToFetch(\"90\");\n            }}\n          >\n            Week\n          </div>\n          <div\n            value=\"month\"\n            onClick={() => {\n              setViewFieldDuration(\"30\");\n              setTimeframeToFetch(\"90\");\n            }}\n          >\n            Month\n          </div>\n          <div\n            value=\"year\"\n            onClick={() => {\n              setViewFieldDuration(\"365\");\n              setTimeframeToFetch(\"max\");\n            }}\n          >\n            Year\n          </div>\n          <div\n            value=\"all\"\n            onClick={() => {\n              setTimeframeToFetch(\"max\");\n              setTimeframeToFetch(\"max\");\n            }}\n          >\n            All\n          </div>\n        </div>\n        <div className=\"chart\"></div>\n      </div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}