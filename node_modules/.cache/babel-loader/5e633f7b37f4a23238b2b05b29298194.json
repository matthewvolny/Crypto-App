{"ast":null,"code":"var _jsxFileName = \"/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/Chart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useRef } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport axios from \"axios\";\nimport \"./chart.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Chart() {\n  _s();\n\n  // const { coinChartData } = useContext(Context);\n  const {\n    selectedCoinData\n  } = useContext(Context);\n  const [coinChartData, setCoinChartData] = useState();\n  const isMounted = useRef(false);\n  const {\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr\n  } = selectedCoinData;\n  const coinName = selectedCoinData.name;\n  useEffect(() => {\n    const coinLowercase = coinName.charAt(0).toLowerCase() + coinName.slice(1);\n    axios.get( //get single coin price\n    // \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\"\n    //!has converted prices for coins\n    //  'https://api.coingecko.com/api/v3/coins/bitcoin/tickers'\n    //!has description of the coin\n    //\"https://api.coingecko.com/api/v3/coins/bitcoin\"\n    //!historical price data (for max duration) for a particular coin\n    `https://api.coingecko.com/api/v3/coins/${coinLowercase}/market_chart?vs_currency=usd&days=max` //list all coins (tens of thousands)\n    // \"https://api.coingecko.com/api/v3/coins/list\"\n    //get market cap for a smattering of coins (not sure if all)\n    // \"https://api.coingecko.com/api/v3/global\"\n    //have a search bar for individual coins (could show only if it in the list of coins I am displaying), has market cap rank and images links\n    // \"https://api.coingecko.com/api/v3/search?query=bitcoin\"\n    //list of supported and currencies (not exactly sure what this means)\n    // \"https://api.coingecko.com/api/v3/simple/supported_vs_currencies\"\n    ).then(response => {\n      const data = response.data; // console.log(data);\n\n      const priceData = data.prices;\n      const priceDataArray = [];\n      priceData.forEach(priceArray => {\n        // console.log(priceArray);\n        priceDataArray.push({\n          time: priceArray[0],\n          //! convert from unix date here?\n          value: priceArray[1]\n        });\n      }); //!may want to make this (the volume data part)asyncronous (or the whole thing asynchronous), not sure\n\n      const volumeData = data.total_volumes;\n      const volumeDataArray = [];\n      volumeData.forEach(volumeArray => {\n        // console.log(priceArray);\n        volumeDataArray.push({\n          time: volumeArray[0],\n          //! convert from unix date here?\n          value: volumeArray[1]\n        });\n      }); // console.log(\" volume array\");\n      // console.log(volumeDataArray);\n\n      setCoinChartData({\n        prices: priceDataArray,\n        volume: volumeDataArray\n      });\n    });\n  }, []);\n  useEffect(() => {\n    if (isMounted.current) {\n      const chart = createChart(document.querySelector(\".chart\"), {\n        width: 500,\n        height: 450 // rightPriceScale: {\n        //   visible: true,\n        // },\n        // grid: {\n        //   vertLines: {\n        //     visible: true,\n        //   },\n        //   horzLines: {\n        //     visible: true,\n        //   },\n        // },\n        // crosshair: {\n        //   vertLine: {\n        //     visible: true,\n        //   },\n        //   horzLine: {\n        //     visible: true,\n        //   },\n        // },\n        // layout: {\n        //   backgroundColor: \"white\",\n        // },\n        // timeScale: { visible: true },\n        // // borderColor: \"green\",\n        // // timeVisible: false,\n        // // priceScaleMode: percentChange,\n\n      }); //fits timescale to the content\n      // chart.timeScale().fitContent();\n\n      const lineSeries = chart.addLineSeries //used to set y-axis scale (not quite sure exactly how it works)\n      //   {\n      //   autoscaleInfoProvider: () => ({\n      //     priceRange: {\n      //       minValue: 0,\n      //       maxValue: 100,\n      //     },\n      //   }),\n      // }\n      ();\n      lineSeries.applyOptions({\n        color: \"red\",\n        lineWidth: 4 //crosshair dot\n        // crosshairMarkerVisible: true,\n        // //both of these are similar\n        // lastValueVisible: true,\n        // priceLineVisible: true,\n        // //can make the series disapper (labels remain)\n        // visible: true,\n        //\n\n      }); // const customFormatter = (time, tickMarkType, locale) => {\n      //   // tickMarkType: \"year\";\n      // };\n\n      lineSeries.setData(coinChartData.prices); //   window.addEventListener(\"resize\", handleResize);\n\n      const volumeSeries = chart.addHistogramSeries({\n        color: \"#26a69a\" // priceFormat: {\n        //   type: \"volume\",\n        // },\n        // priceScaleId: \"\",\n        // scaleMargins: {\n        //   top: 0.8,\n        //   bottom: 0,\n        // },\n\n      }); //volume series\n\n      volumeSeries.setData(coinChartData.volume);\n    } else {\n      isMounted.current = true;\n    }\n  }, [coinChartData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coin-details-flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"icon\",\n        src: image,\n        alt: \"icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: symbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: rank\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"$\", price]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [percentChange24hr, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: marketCap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: volume24hr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Chart, \"C5xSqAJs0fhKlF5Rb1pS/wyHzW8=\");\n\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/Chart.js"],"names":["React","useContext","useState","useEffect","useRef","Context","createChart","axios","Chart","selectedCoinData","coinChartData","setCoinChartData","isMounted","rank","image","name","symbol","price","percentChange24hr","percentChange7d","marketCap","volume24hr","coinName","coinLowercase","charAt","toLowerCase","slice","get","then","response","data","priceData","prices","priceDataArray","forEach","priceArray","push","time","value","volumeData","total_volumes","volumeDataArray","volumeArray","volume","current","chart","document","querySelector","width","height","lineSeries","addLineSeries","applyOptions","color","lineWidth","setData","volumeSeries","addHistogramSeries"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport axios from \"axios\";\nimport \"./chart.css\";\n\nexport default function Chart() {\n  // const { coinChartData } = useContext(Context);\n  const { selectedCoinData } = useContext(Context);\n  const [coinChartData, setCoinChartData] = useState();\n  const isMounted = useRef(false);\n\n  const {\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr,\n  } = selectedCoinData;\n\n  const coinName = selectedCoinData.name;\n  useEffect(() => {\n    const coinLowercase = coinName.charAt(0).toLowerCase() + coinName.slice(1);\n    axios\n      .get(\n        //get single coin price\n        // \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\"\n        //!has converted prices for coins\n        //  'https://api.coingecko.com/api/v3/coins/bitcoin/tickers'\n        //!has description of the coin\n        //\"https://api.coingecko.com/api/v3/coins/bitcoin\"\n        //!historical price data (for max duration) for a particular coin\n        `https://api.coingecko.com/api/v3/coins/${coinLowercase}/market_chart?vs_currency=usd&days=max`\n        //list all coins (tens of thousands)\n        // \"https://api.coingecko.com/api/v3/coins/list\"\n        //get market cap for a smattering of coins (not sure if all)\n        // \"https://api.coingecko.com/api/v3/global\"\n        //have a search bar for individual coins (could show only if it in the list of coins I am displaying), has market cap rank and images links\n        // \"https://api.coingecko.com/api/v3/search?query=bitcoin\"\n        //list of supported and currencies (not exactly sure what this means)\n        // \"https://api.coingecko.com/api/v3/simple/supported_vs_currencies\"\n      )\n      .then((response) => {\n        const data = response.data;\n        // console.log(data);\n        const priceData = data.prices;\n        const priceDataArray = [];\n        priceData.forEach((priceArray) => {\n          // console.log(priceArray);\n          priceDataArray.push({\n            time: priceArray[0],\n            //! convert from unix date here?\n            value: priceArray[1],\n          });\n        });\n        //!may want to make this (the volume data part)asyncronous (or the whole thing asynchronous), not sure\n        const volumeData = data.total_volumes;\n        const volumeDataArray = [];\n        volumeData.forEach((volumeArray) => {\n          // console.log(priceArray);\n          volumeDataArray.push({\n            time: volumeArray[0],\n            //! convert from unix date here?\n            value: volumeArray[1],\n          });\n        });\n        // console.log(\" volume array\");\n        // console.log(volumeDataArray);\n        setCoinChartData({ prices: priceDataArray, volume: volumeDataArray });\n      });\n  }, []);\n\n  useEffect(() => {\n    if (isMounted.current) {\n      const chart = createChart(document.querySelector(\".chart\"), {\n        width: 500,\n        height: 450,\n        // rightPriceScale: {\n        //   visible: true,\n        // },\n        // grid: {\n        //   vertLines: {\n        //     visible: true,\n        //   },\n        //   horzLines: {\n        //     visible: true,\n        //   },\n        // },\n        // crosshair: {\n        //   vertLine: {\n        //     visible: true,\n        //   },\n        //   horzLine: {\n        //     visible: true,\n        //   },\n        // },\n        // layout: {\n        //   backgroundColor: \"white\",\n        // },\n        // timeScale: { visible: true },\n        // // borderColor: \"green\",\n        // // timeVisible: false,\n        // // priceScaleMode: percentChange,\n      });\n      //fits timescale to the content\n      // chart.timeScale().fitContent();\n\n      const lineSeries = chart\n        .addLineSeries\n        //used to set y-axis scale (not quite sure exactly how it works)\n        //   {\n        //   autoscaleInfoProvider: () => ({\n        //     priceRange: {\n        //       minValue: 0,\n        //       maxValue: 100,\n        //     },\n        //   }),\n        // }\n        ();\n      lineSeries.applyOptions({\n        color: \"red\",\n        lineWidth: 4,\n        //crosshair dot\n        // crosshairMarkerVisible: true,\n        // //both of these are similar\n        // lastValueVisible: true,\n        // priceLineVisible: true,\n        // //can make the series disapper (labels remain)\n        // visible: true,\n        //\n      });\n      // const customFormatter = (time, tickMarkType, locale) => {\n      //   // tickMarkType: \"year\";\n      // };\n      lineSeries.setData(coinChartData.prices);\n      //   window.addEventListener(\"resize\", handleResize);\n\n      const volumeSeries = chart.addHistogramSeries({\n        color: \"#26a69a\",\n        // priceFormat: {\n        //   type: \"volume\",\n        // },\n        // priceScaleId: \"\",\n        // scaleMargins: {\n        //   top: 0.8,\n        //   bottom: 0,\n        // },\n      });\n      //volume series\n      volumeSeries.setData(coinChartData.volume);\n    } else {\n      isMounted.current = true;\n    }\n  }, [coinChartData]);\n\n  return (\n    <>\n      <div className=\"coin-details-flex\">\n        <img className=\"icon\" src={image} alt=\"icon\" />\n        <div>{name}</div>\n        <div>{symbol}</div>\n        <div>{rank}</div>\n        <div>${price}</div>\n        <div>{percentChange24hr}%</div>\n        <div>{marketCap}</div>\n        <div>{volume24hr}</div>\n      </div>\n      <div className=\"chart\"></div>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}