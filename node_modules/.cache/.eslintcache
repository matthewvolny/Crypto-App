[{"/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/index.js":"1","/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/App.js":"2","/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/reportWebVitals.js":"3","/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/Coinlist.js":"4","/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/CoinRow.js":"5","/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/context/context.js":"6","/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/Chart.js":"7","/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/SearchBar.js":"8","/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/index.js":"9","/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/App.js":"10","/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/reportWebVitals.js":"11","/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/components/Coinlist.js":"12","/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/components/Chart.js":"13","/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/context/context.js":"14","/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/components/CoinRow.js":"15","/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/components/chartControls.js":"16","/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/components/ChartControls.js":"17"},{"size":500,"mtime":1649433274077,"results":"18","hashOfConfig":"19"},{"size":7156,"mtime":1649791252271,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1649433274077,"results":"21","hashOfConfig":"19"},{"size":1498,"mtime":1649772784244,"results":"22","hashOfConfig":"19"},{"size":1979,"mtime":1649789719211,"results":"23","hashOfConfig":"19"},{"size":90,"mtime":1649629322579,"results":"24","hashOfConfig":"19"},{"size":6879,"mtime":1649796516438,"results":"25","hashOfConfig":"19"},{"size":557,"mtime":1649769183556,"results":"26","hashOfConfig":"19"},{"size":500,"mtime":1649433274077,"results":"27","hashOfConfig":"28"},{"size":8251,"mtime":1650026119271,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":1649433274077,"results":"30","hashOfConfig":"28"},{"size":1498,"mtime":1649772784244,"results":"31","hashOfConfig":"28"},{"size":11851,"mtime":1650037021286,"results":"32","hashOfConfig":"28"},{"size":90,"mtime":1649629322579,"results":"33","hashOfConfig":"28"},{"size":1979,"mtime":1649789719211,"results":"34","hashOfConfig":"28"},{"size":2110,"mtime":1650031794326,"results":"35","hashOfConfig":"28"},{"size":2260,"mtime":1650033200020,"results":"36","hashOfConfig":"28"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1pkojmz",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"5w18n",{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"69"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"69"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/index.js",[],[],["96","97"],"/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/App.js",["98","99","100","101","102"],[],"/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/reportWebVitals.js",[],[],"/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/Coinlist.js",["103","104","105","106"],[],"import React, { useEffect, useRef, useContext, useState } from \"react\";\n//import Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport CoinRow from \"./CoinRow\";\n\nimport \"./coinlist.css\";\n\nexport default function Coinlist(props) {\n  // const { coinData } = useContext(Context);\n  const [searchInput, setSearchInput] = useState();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"submitted\");\n  };\n\n  return (\n    <>\n      <div className=\"coinlist-controls\">\n        {/* form */}\n        <form className=\"search-form\" onSubmit={handleSubmit}>\n          <input\n            onChange={(e) => {\n              setSearchInput(e.target.value);\n            }}\n            value={searchInput}\n            type=\"text\"\n            placeholder=\"Search cryptocurrency\"\n          />\n          <button>Submit</button>\n        </form>\n        {/* sorting buttons */}\n        <div className=\"sorting-buttons\">\n          <div>Rank</div>\n          <div>Volume</div>\n          <div>Trending</div>\n          <div>USD</div>\n        </div>\n        {/* table headers */}\n        <div className=\"coinlist-header\">\n          <div>Rank</div>\n          <div>Name</div>\n          <div>Price</div>\n          <div>24hr%</div>\n          <div>7d%</div>\n          <div>Last 7 Days</div>\n        </div>\n      </div>\n      <div className=\"coinlist\">\n        {props.coinData?.map((coin) => {\n          return <CoinRow coin={coin} />;\n        })}\n      </div>\n    </>\n  );\n}\n","/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/CoinRow.js",["107","108","109","110","111","112"],[],"import React, { useState, useRef, useContext, useEffect } from \"react\";\nimport Context from \"../context/context\";\n// import { createChart } from \"lightweight-charts\";\nimport { NavLink } from \"react-router-dom\";\nimport { Sparklines, SparklinesLine } from \"react-sparklines\";\nimport axios from \"axios\";\nimport \"./coinrow.css\";\n\nexport default function CoinRow(props) {\n  const [sparklineColor, setSparklineColor] = useState();\n  const { setSelectedCoinData, setCoinChartData } = useContext(Context);\n  //const isMounted = useRef(false);\n  // console.log(props);\n  // const { name, price, percentChange, data } = props.coin;\n  const {\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr,\n    sparkline,\n  } = props.coin;\n\n  //colors sparkline chart based on 7d % change\n  useEffect(() => {\n    if (percentChange7d > 0) {\n      setSparklineColor(\"green\");\n    } else {\n      setSparklineColor(\"red\");\n    }\n  });\n\n  return (\n    <div className=\"coin-row\">\n      <div>{rank}</div>\n      <div>\n        <img src={image} alt=\"crypto-icon\" className=\"icon\"></img>\n      </div>\n      <NavLink\n        to={`/currencies/${name}`}\n        key={rank}\n        onClick={() => {\n          setSelectedCoinData(props.coin);\n          // retrieveDetailedChartData(name);\n        }}\n      >\n        {name}\n      </NavLink>\n      <div>{symbol}</div>\n      <div>${price}</div>\n      <div className=\"percent-change\">{percentChange24hr}</div>\n      <div className=\"percent-change\">{percentChange7d}</div>\n      {/* <div>${marketCap}</div>\n      <div>${volume24hr}</div> */}\n      {/* <div className=\"chart\"></div> */}\n      <Sparklines\n        // className=\"sparkline-container\"\n        data={sparkline}\n        // width={100}\n        // height={20}\n        // margin={5}\n      >\n        <SparklinesLine\n          style={{ strokeWidth: 3, stroke: sparklineColor, fill: \"none\" }}\n        />\n      </Sparklines>\n    </div>\n  );\n}\n","/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/context/context.js",[],[],"/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/Chart.js",["113","114"],[],"import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport \"./chart.css\";\nmoment().format();\n\nexport default function Chart() {\n  // const { coinChartData } = useContext(Context);\n  const { selectedCoinData } = useContext(Context);\n  const [coinChartData, setCoinChartData] = useState();\n  const isMounted = useRef(false);\n\n  const {\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr,\n  } = selectedCoinData;\n  const coinName = selectedCoinData.name;\n\n  const retrieveChartData = (duration, momentFormat) => {\n    const coinLowercase = coinName.charAt(0).toLowerCase() + coinName.slice(1);\n    axios\n      .get(\n        //get single coin price\n        // \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\"\n        //!has converted prices for coins\n        //  'https://api.coingecko.com/api/v3/coins/bitcoin/tickers'\n        //!has description of the coin\n        //\"https://api.coingecko.com/api/v3/coins/bitcoin\"\n        //!historical price data (for max duration) for a particular coin\n        `https://api.coingecko.com/api/v3/coins/${coinLowercase}/market_chart?vs_currency=usd&days=${duration}`\n        //list all coins (tens of thousands)\n        // \"https://api.coingecko.com/api/v3/coins/list\"\n        //get market cap for a smattering of coins (not sure if all)\n        // \"https://api.coingecko.com/api/v3/global\"\n        //have a search bar for individual coins (could show only if it in the list of coins I am displaying), has market cap rank and images links\n        // \"https://api.coingecko.com/api/v3/search?query=bitcoin\"\n        //list of supported and currencies (not exactly sure what this means)\n        // \"https://api.coingecko.com/api/v3/simple/supported_vs_currencies\"\n      )\n      .then((response) => {\n        const data = response.data;\n        // console.log(data);\n        const priceData = data.prices;\n        const priceDataArray = [];\n        priceData.forEach((priceArray) => {\n          priceDataArray.push({\n            time: Math.floor(priceArray[0] / 1000),\n            // time: moment(priceArray[0]).format(momentFormat),\n            value: priceArray[1],\n          });\n        });\n        const volumeData = data.total_volumes;\n        const volumeDataArray = [];\n        volumeData.forEach((volumeArray) => {\n          volumeDataArray.push({\n            time: Math.floor(volumeArray[0] / 1000),\n            // time: moment(volumeArray[0]).format(momentFormat),\n            value: volumeArray[1],\n          });\n        });\n        setCoinChartData({ prices: priceDataArray, volume: volumeDataArray });\n      });\n  };\n\n  useEffect(() => {\n    retrieveChartData(\"1\" /*, \"MM/DD/YYYY\"*/);\n  }, []);\n\n  // useEffect(() => {\n  //   let chartElement = document.querySelector(\".tv-lightweight-charts\");\n  //   if (chartElement) {\n  //     console.log(\"here\");\n  //     chartElement.setAttribute(\"id\", \"chartElement\");\n  //   }\n  // });\n\n  useEffect(() => {\n    if (isMounted.current) {\n      const chart = createChart(document.querySelector(\".chart\"), {\n        width: 500,\n        height: 400,\n        rightPriceScale: {\n          visible: true,\n        },\n        grid: {\n          vertLines: {\n            visible: true,\n          },\n          horzLines: {\n            visible: true,\n          },\n        },\n        crosshair: {\n          vertLine: {\n            visible: true,\n          },\n          horzLine: {\n            visible: true,\n          },\n        },\n        layout: {\n          backgroundColor: \"white\",\n        },\n        // timeScale: {\n        //   visible: true,\n        //   /*timeVisible: true secondsVisible: true,*/\n        // },\n\n        timeScale: {\n          timeVisible: true,\n          secondsVisible: false,\n        },\n        // borderColor: \"green\",\n        // timeVisible: false,\n        // priceScaleMode: percentChange,\n      });\n      //fits timescale to the content\n      // chart.timeScale().fitContent();\n\n      const lineSeries = chart\n        .addLineSeries\n        //used to set y-axis scale (not quite sure exactly how it works)\n        //   {\n        //   autoscaleInfoProvider: () => ({\n        //     priceRange: {\n        //       minValue: 0,\n        //       maxValue: 100,\n        //     },\n        //   }),\n        // }\n        ();\n      lineSeries.applyOptions({\n        color: \"red\",\n        lineWidth: 4,\n        //crosshair dot\n        crosshairMarkerVisible: true,\n        //both of these are similar\n        lastValueVisible: true,\n        priceLineVisible: true,\n        //can make the series disapper (labels remain)\n        visible: true,\n        //\n      });\n      // const customFormatter = (time, tickMarkType, locale) => {\n      //   // tickMarkType: \"year\";\n      // };\n      lineSeries.setData(coinChartData.prices);\n      //   window.addEventListener(\"resize\", handleResize);\n\n      const volumeSeries = chart.addHistogramSeries({\n        color: \"#26a69a\",\n        priceFormat: {\n          type: \"volume\",\n        },\n        priceScaleId: \"\",\n        scaleMargins: {\n          top: 0.8,\n          bottom: 0,\n        },\n      });\n      //volume series\n      volumeSeries.setData(coinChartData.volume);\n    } else {\n      isMounted.current = true;\n    }\n  }, [coinChartData]);\n\n  return (\n    <>\n      <div className=\"coin-details-flex\">\n        <img className=\"icon\" src={image} alt=\"icon\" />\n        <div>{name}</div>\n        <div>{symbol}</div>\n        <div>{rank}</div>\n        <div>${price}</div>\n        <div>{percentChange24hr}%</div>\n        <div>{marketCap}</div>\n        <div>{volume24hr}</div>\n      </div>\n      <div className=\"chart-with-controls-container\">\n        <div className=\"chart-controls\">\n          <div\n            value=\"day\"\n            onClick={() => {\n              retrieveChartData(\"1\", \"HH:mm:ss\");\n            }}\n          >\n            Day\n          </div>\n          <div\n            value=\"week\"\n            onClick={() => {\n              retrieveChartData(\"7\", \"MM/DD/YYYY\");\n            }}\n          >\n            Week\n          </div>\n          <div\n            value=\"month\"\n            onClick={() => {\n              retrieveChartData(\"30\", \"MM/DD/YYYY\");\n            }}\n          >\n            Month\n          </div>\n          <div\n            value=\"year\"\n            onClick={() => {\n              retrieveChartData(\"365\", \"MM/DD/YYYY\");\n            }}\n          >\n            Year\n          </div>\n          <div\n            value=\"all\"\n            onClick={() => {\n              retrieveChartData(\"max\", \"MM/DD/YYYY\");\n            }}\n          >\n            All\n          </div>\n        </div>\n        <div className=\"chart\"></div>\n      </div>\n    </>\n  );\n}\n","/Users/matthewvolny/Desktop/DigitalCrafts/crypto playing around/binance-api-websocket-tutorial/src/components/SearchBar.js",[],[],["115","116"],"/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/index.js",[],[],["117","118"],"/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/App.js",["119","120","121","122","123","124"],[],"/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/reportWebVitals.js",[],[],"/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/components/Coinlist.js",["125","126","127","128"],[],"/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/components/Chart.js",["129","130","131","132","133","134","135","136"],[],"import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport ChartControls from \"./ChartControls\";\nimport Context from \"../context/context\";\nimport { createChart } from \"lightweight-charts\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport \"./chart.css\";\nmoment().format();\n\nexport default function Chart() {\n  const { selectedCoinData } = useContext(Context);\n  const [coinChartData, setCoinChartData] = useState();\n  //!set viewfield duration back to 1\n  const [viewFieldDuration, setViewFieldDuration] = useState(\"1\");\n  const [timeFrameToFetch, setTimeFrameToFetch] = useState(\"90\");\n  const isMounted = useRef(false);\n  const isMountedTwo = useRef(false);\n  const prevTimeFrameToFetchRef = useRef(\"90\");\n\n  //global variables\n  const {\n    id,\n    rank,\n    image,\n    name,\n    symbol,\n    price,\n    percentChange24hr,\n    percentChange7d,\n    marketCap,\n    volume24hr,\n  } = selectedCoinData;\n\n  const coinId = selectedCoinData.id;\n  let globalChart;\n  let globalLineSeries;\n  let globalVolumeSeries;\n\n  //(2)retrieves price/volume data for for varying periods of time\n  const retrieveChartData = (duration) => {\n    const coinLowercase = coinId.charAt(0).toLowerCase() + coinId.slice(1);\n    axios\n      .get(\n        `https://api.coingecko.com/api/v3/coins/${coinLowercase}/market_chart?vs_currency=usd&days=${duration}`\n      )\n      .then((response) => {\n        const data = response.data;\n        console.log(\"fetched data\");\n        console.log(data);\n        //formats \"price\" data based on whether it is in \"days\" or \"hrs\"\n        const priceData = data.prices;\n        const priceDataArray = [];\n        if (duration === \"max\") {\n          //if viewfield set to \"max\"\n          if (viewFieldDuration === \"max\") {\n            console.log(`data in \"week\" format`);\n            for (let i = priceData.length - 1; i >= 0; i--) {\n              if (i % 7 === 0) {\n                priceDataArray.unshift({\n                  time: moment(priceData[i][0]).format(\"MM/DD/YYYY\"),\n                  value: priceData[i][1].toFixed(4),\n                });\n              }\n            }\n          } else {\n            //if viewfield set to \"365\"\n            console.log(`data in \"day\" format`);\n            priceData.forEach((priceArray) => {\n              priceDataArray.push({\n                time: moment(priceArray[0]).format(\"MM/DD/YYYY\"),\n                value: priceArray[1].toFixed(4),\n              });\n            });\n          }\n        } else {\n          // console.log(`price in \"hr\" format`);\n          priceData.forEach((priceArray) => {\n            const unixDate = Math.floor(priceArray[0] / 1000);\n            const unixDateTZAdjusted = unixDate - 14400;\n            priceDataArray.push({\n              time: unixDateTZAdjusted,\n              value: priceArray[1].toFixed(4),\n            });\n          });\n        }\n        //formats \"volume\" data based on whether it is in \"days\" or \"hrs\"\n        const volumeData = data.total_volumes;\n        const volumeDataArray = [];\n        if (duration === \"max\") {\n          //if viewfield set to \"max\"\n          if (viewFieldDuration === \"max\") {\n            console.log(`data in \"week\" format`);\n            for (let i = volumeData.length - 1; i >= 0; i--) {\n              if (i % 7 === 0) {\n                volumeDataArray.unshift({\n                  time: moment(volumeData[i][0]).format(\"MM/DD/YYYY\"),\n                  value: volumeData[i][1].toFixed(4),\n                });\n              }\n            }\n          } else {\n            //if viewfield set to \"365\"\n            console.log(`data in \"day\" format`);\n            volumeData.forEach((volumeArray) => {\n              volumeDataArray.push({\n                time: moment(volumeArray[0]).format(\"MM/DD/YYYY\"),\n                value: volumeArray[1].toFixed(4),\n              });\n            });\n          }\n          //\n        } else {\n          // console.log(`volume in \"hr\" format`);\n          volumeData.forEach((volumeArray) => {\n            const unixDate = Math.floor(volumeArray[0] / 1000);\n            const unixDateTZAdjusted = unixDate - 14400;\n            volumeDataArray.push({\n              time: unixDateTZAdjusted,\n              value: volumeArray[1].toFixed(4),\n            });\n          });\n        }\n        setCoinChartData({ prices: priceDataArray, volume: volumeDataArray });\n      });\n  };\n\n  //(1)calls function making API request for chart data, when  component rendered, coin selected, or \"timeframe\" for particular coin is changed (with button click)\n\n  //const isMounted = useRef(false);\n\n  //  if (isMounted.current) {\n  //     if (document.querySelector(\".tv-lightweight-charts\")) {\n  //       updateChartData(coinChartData);\n  //     } else {\n  //       renderChart(coinChartData);\n  //     }\n  //   } else {\n  //     isMounted.current = true;\n  //   }\n\n  useEffect(() => {\n    console.log(\"number 1\");\n    prevTimeFrameToFetchRef.current = timeFrameToFetch;\n    //!can limit redundant calls here(i.e. repeated 30day calls)\n    retrieveChartData(timeFrameToFetch);\n  }, [selectedCoinData]);\n\n  //(4a)renders the chart\n  const renderChart = (coinChartData) => {\n    console.log(coinChartData);\n    const chart = createChart(document.querySelector(\".chart\"), {\n      width: 500,\n      height: 400,\n      rightPriceScale: {\n        visible: true,\n      },\n      grid: {\n        vertLines: {\n          visible: true,\n        },\n        horzLines: {\n          visible: true,\n        },\n      },\n      crosshair: {\n        vertLine: {\n          visible: true,\n        },\n        horzLine: {\n          visible: true,\n        },\n      },\n      layout: {\n        backgroundColor: \"white\",\n      },\n      timeScale: {\n        timeVisible: true,\n        secondsVisible: true,\n      },\n      // localization: {\n      //   timeFormatter: (businessDayOrTimestamp) => {\n      //     if (chart.isBusinessDay(businessDayOrTimestamp)) {\n      //       return (\n      //         \"bd=\" +\n      //         businessDayOrTimestamp.day +\n      //         \"-\" +\n      //         businessDayOrTimestamp.month +\n      //         \"-\" +\n      //         businessDayOrTimestamp.year\n      //       );\n      //     }\n\n      //     return \"ts=\" + businessDayOrTimestamp;\n      //   },\n      // },\n    });\n    const lineSeries = chart.addLineSeries();\n    lineSeries.applyOptions({\n      color: \"red\",\n      lineWidth: 4,\n      crosshairMarkerVisible: true,\n      lastValueVisible: true,\n      priceLineVisible: true,\n      visible: true,\n    });\n    // console.log(coinChartData.prices);\n    lineSeries.setData(coinChartData.prices);\n\n    const volumeSeries = chart.addHistogramSeries({\n      color: \"#26a69a\",\n      priceFormat: {\n        type: \"volume\",\n      },\n      priceScaleId: \"\",\n      scaleMargins: {\n        top: 0.8,\n        bottom: 0,\n      },\n    });\n    // console.log(coinChartData.volume);\n    volumeSeries.setData(coinChartData.volume);\n\n    // //!show values back to a given date\n    const todaysDate = new Date();\n    const todaysDateUnixTime = new Date(todaysDate).getTime() / 1000;\n    // const todaysFormattedUnixDate = Math.floor(todaysDate / 1000);\n    switch (viewFieldDuration) {\n      case \"1\":\n        console.log(\"case 1\");\n        const twentyFourHoursPriorDate = todaysDateUnixTime - 86400;\n        //!alternatively can show beginning of actual day (though this is more relevant for stocks, not crypto)\n        // todaysDate.setUTCHours(0, 0, 0, 0);\n        // const beginningOfDay = todaysDate.toUTCString();\n        // const beginningOfDayUnixTime =\n        //   new Date(beginningOfDay).getTime() / 1000;\n        chart.timeScale().setVisibleRange({\n          from: twentyFourHoursPriorDate,\n          to: todaysDateUnixTime,\n        });\n        break;\n      case \"7\":\n        console.log(\"case 7\");\n        const sevenDaysPriorDate = todaysDateUnixTime - 604800;\n        chart.timeScale().setVisibleRange({\n          from: sevenDaysPriorDate,\n          to: todaysDateUnixTime,\n        });\n        break;\n      case \"30\":\n        console.log(\"case 30\");\n        const oneMonthPriorDate = todaysDateUnixTime - 2592000;\n        chart.timeScale().setVisibleRange({\n          from: oneMonthPriorDate,\n          to: todaysDateUnixTime,\n        });\n        break;\n      case \"365\":\n        console.log(\"case 365\");\n        // debugger;\n        const oneYearPriorDate = todaysDateUnixTime - 3.154e7;\n        chart.timeScale().setVisibleRange({\n          from: oneYearPriorDate,\n          to: todaysDateUnixTime,\n        });\n        break;\n      case \"max\":\n        console.log(\"case max\");\n        chart.timeScale().fitContent();\n        break;\n      default:\n      // code block\n    }\n    //global variables used to update the chart (not currently being used)\n    globalChart = chart;\n    globalLineSeries = lineSeries;\n    globalVolumeSeries = volumeSeries;\n  };\n\n  //(4b)change chart data(two methods)\n  const updateChartData = (newData) => {\n    console.log(\"updateChart\");\n    console.log(newData);\n    //!two approaches to replacing data in chart\n    //!(1)-delete chart\n    const previousChart = document.querySelector(\".tv-lightweight-charts\");\n    previousChart.remove();\n    renderChart(newData);\n\n    // //!(2)-delete series (presumably faster(?), not sure)\n    // globalChart.removeSeries(globalLineSeries);\n    // const newLineSeries = globalChart.addLineSeries();\n    // newLineSeries.applyOptions({\n    //   color: \"red\",\n    //   lineWidth: 4,\n    //   crosshairMarkerVisible: true,\n    //   //!may or may not keep these two on\n    //   lastValueVisible: true,\n    //   priceLineVisible: true,\n    // });\n    // newLineSeries.setData(newData);\n\n    // //!very usefull, keeps all data in frame\n    // // globalChart.timeScale().fitContent();\n\n    // //!scrolls screen 5 days to the left (with or without animation) - may have limited utility, as moves right side as well\n    // //globalChart.timeScale().scrollToPosition(-5, true);\n    // //!show values back to a given date\n    // globalChart.timeScale().setVisibleRange({\n    //   //!can programmatically get various times in the past(1yr ago,  max, etc.) from: new Date(new Date().setFullYear(new Date().getFullYear() - 1)),\n    //   from: \"2018-12-17\",\n    //   //!most recent date (may be able to set this a little in the future to get more space)\n    //   to: new Date().toISOString().slice(0, 10),\n    //   //or this // to: Date.now() / 1000;\n    // });\n  };\n\n  //(3)renders a new chart or updates the current chart with new data (* this is (1) if chart is already rendered, as it updates chart on button click)\n  useEffect(() => {\n    if (isMounted.current) {\n      if (document.querySelector(\".tv-lightweight-charts\")) {\n        //!if user has clicked a different timeframe to fetch (i.e. 1year, or max)\n        if (prevTimeFrameToFetchRef.current !== timeFrameToFetch) {\n          retrieveChartData(timeFrameToFetch);\n          prevTimeFrameToFetchRef.current = timeFrameToFetch;\n        } else {\n          console.log(\"updateChartData\");\n          //deletes the chart before rendering\n          updateChartData(coinChartData);\n        }\n      } else {\n        renderChart(coinChartData);\n      }\n    } else {\n      isMounted.current = true;\n    }\n  }, [coinChartData, viewFieldDuration]);\n\n  return (\n    <>\n      <div className=\"coin-details-flex\">\n        <img className=\"icon\" src={image} alt=\"icon\" />\n        <div>{name}</div>\n        <div>{symbol}</div>\n        <div>{rank}</div>\n        <div>${price}</div>\n        <div>{percentChange24hr}%</div>\n        <div>{marketCap}</div>\n        <div>{volume24hr}</div>\n      </div>\n      <div className=\"chart-with-controls-container\">\n        <ChartControls\n          setViewFieldDuration={setViewFieldDuration}\n          setTimeFrameToFetch={setTimeFrameToFetch}\n        />\n        <div className=\"chart\"></div>\n      </div>\n    </>\n  );\n}\n","/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/context/context.js",[],[],"/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/components/CoinRow.js",["137","138","139","140","141","142"],[],"/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/components/chartControls.js",["143","144","145","146","147"],[],"/Users/matthewvolny/Desktop/DigitalCrafts/Displayed-Projects/Crypto-App/src/components/ChartControls.js",[],[],["148","149"],{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":10,"column":25,"nodeType":"156","messageId":"157","endLine":10,"endColumn":41},{"ruleId":"154","severity":1,"message":"158","line":12,"column":10,"nodeType":"156","messageId":"157","endLine":12,"endColumn":20},{"ruleId":"154","severity":1,"message":"159","line":15,"column":10,"nodeType":"156","messageId":"157","endLine":15,"endColumn":23},{"ruleId":"154","severity":1,"message":"160","line":15,"column":25,"nodeType":"156","messageId":"157","endLine":15,"endColumn":41},{"ruleId":"161","severity":1,"message":"162","line":25,"column":6,"nodeType":"163","endLine":25,"endColumn":21,"suggestions":"164"},{"ruleId":"154","severity":1,"message":"165","line":1,"column":17,"nodeType":"156","messageId":"157","endLine":1,"endColumn":26},{"ruleId":"154","severity":1,"message":"166","line":1,"column":28,"nodeType":"156","messageId":"157","endLine":1,"endColumn":34},{"ruleId":"154","severity":1,"message":"167","line":1,"column":36,"nodeType":"156","messageId":"157","endLine":1,"endColumn":46},{"ruleId":"154","severity":1,"message":"168","line":3,"column":10,"nodeType":"156","messageId":"157","endLine":3,"endColumn":21},{"ruleId":"154","severity":1,"message":"166","line":1,"column":27,"nodeType":"156","messageId":"157","endLine":1,"endColumn":33},{"ruleId":"154","severity":1,"message":"169","line":6,"column":8,"nodeType":"156","messageId":"157","endLine":6,"endColumn":13},{"ruleId":"154","severity":1,"message":"160","line":11,"column":32,"nodeType":"156","messageId":"157","endLine":11,"endColumn":48},{"ruleId":"154","severity":1,"message":"170","line":23,"column":5,"nodeType":"156","messageId":"157","endLine":23,"endColumn":14},{"ruleId":"154","severity":1,"message":"171","line":24,"column":5,"nodeType":"156","messageId":"157","endLine":24,"endColumn":15},{"ruleId":"161","severity":1,"message":"172","line":29,"column":3,"nodeType":"156","endLine":29,"endColumn":12,"suggestions":"173"},{"ruleId":"154","severity":1,"message":"174","line":22,"column":5,"nodeType":"156","messageId":"157","endLine":22,"endColumn":20},{"ruleId":"161","severity":1,"message":"175","line":76,"column":6,"nodeType":"163","endLine":76,"endColumn":8,"suggestions":"176"},{"ruleId":"150","replacedBy":"177"},{"ruleId":"152","replacedBy":"178"},{"ruleId":"150","replacedBy":"179"},{"ruleId":"152","replacedBy":"180"},{"ruleId":"154","severity":1,"message":"155","line":10,"column":25,"nodeType":"156","messageId":"157","endLine":10,"endColumn":41},{"ruleId":"154","severity":1,"message":"158","line":12,"column":10,"nodeType":"156","messageId":"157","endLine":12,"endColumn":20},{"ruleId":"154","severity":1,"message":"159","line":15,"column":10,"nodeType":"156","messageId":"157","endLine":15,"endColumn":23},{"ruleId":"154","severity":1,"message":"160","line":15,"column":25,"nodeType":"156","messageId":"157","endLine":15,"endColumn":41},{"ruleId":"161","severity":1,"message":"162","line":25,"column":6,"nodeType":"163","endLine":25,"endColumn":21,"suggestions":"181"},{"ruleId":"161","severity":1,"message":"182","line":180,"column":6,"nodeType":"163","endLine":180,"endColumn":16,"suggestions":"183"},{"ruleId":"154","severity":1,"message":"165","line":1,"column":17,"nodeType":"156","messageId":"157","endLine":1,"endColumn":26},{"ruleId":"154","severity":1,"message":"166","line":1,"column":28,"nodeType":"156","messageId":"157","endLine":1,"endColumn":34},{"ruleId":"154","severity":1,"message":"167","line":1,"column":36,"nodeType":"156","messageId":"157","endLine":1,"endColumn":46},{"ruleId":"154","severity":1,"message":"168","line":3,"column":10,"nodeType":"156","messageId":"157","endLine":3,"endColumn":21},{"ruleId":"154","severity":1,"message":"184","line":17,"column":9,"nodeType":"156","messageId":"157","endLine":17,"endColumn":21},{"ruleId":"154","severity":1,"message":"185","line":22,"column":5,"nodeType":"156","messageId":"157","endLine":22,"endColumn":7},{"ruleId":"154","severity":1,"message":"174","line":29,"column":5,"nodeType":"156","messageId":"157","endLine":29,"endColumn":20},{"ruleId":"154","severity":1,"message":"186","line":35,"column":7,"nodeType":"156","messageId":"157","endLine":35,"endColumn":18},{"ruleId":"154","severity":1,"message":"187","line":36,"column":7,"nodeType":"156","messageId":"157","endLine":36,"endColumn":23},{"ruleId":"154","severity":1,"message":"188","line":37,"column":7,"nodeType":"156","messageId":"157","endLine":37,"endColumn":25},{"ruleId":"161","severity":1,"message":"189","line":146,"column":6,"nodeType":"163","endLine":146,"endColumn":24,"suggestions":"190"},{"ruleId":"161","severity":1,"message":"191","line":336,"column":6,"nodeType":"163","endLine":336,"endColumn":40,"suggestions":"192"},{"ruleId":"154","severity":1,"message":"166","line":1,"column":27,"nodeType":"156","messageId":"157","endLine":1,"endColumn":33},{"ruleId":"154","severity":1,"message":"169","line":6,"column":8,"nodeType":"156","messageId":"157","endLine":6,"endColumn":13},{"ruleId":"154","severity":1,"message":"160","line":11,"column":32,"nodeType":"156","messageId":"157","endLine":11,"endColumn":48},{"ruleId":"154","severity":1,"message":"170","line":23,"column":5,"nodeType":"156","messageId":"157","endLine":23,"endColumn":14},{"ruleId":"154","severity":1,"message":"171","line":24,"column":5,"nodeType":"156","messageId":"157","endLine":24,"endColumn":15},{"ruleId":"161","severity":1,"message":"172","line":29,"column":3,"nodeType":"156","endLine":29,"endColumn":12,"suggestions":"193"},{"ruleId":"194","severity":2,"message":"195","line":6,"column":55,"nodeType":"156","messageId":"196","endLine":6,"endColumn":66},{"ruleId":"194","severity":2,"message":"195","line":9,"column":57,"nodeType":"156","messageId":"196","endLine":9,"endColumn":68},{"ruleId":"194","severity":2,"message":"195","line":15,"column":24,"nodeType":"156","messageId":"196","endLine":15,"endColumn":35},{"ruleId":"194","severity":2,"message":"195","line":22,"column":24,"nodeType":"156","messageId":"196","endLine":22,"endColumn":35},{"ruleId":"194","severity":2,"message":"195","line":29,"column":24,"nodeType":"156","messageId":"196","endLine":29,"endColumn":35},{"ruleId":"150","replacedBy":"197"},{"ruleId":"152","replacedBy":"198"},"no-native-reassign",["199"],"no-negated-in-lhs",["200"],"no-unused-vars","'setEthereumPrice' is assigned a value but never used.","Identifier","unusedVar","'greenOrRed' is assigned a value but never used.","'coinChartData' is assigned a value but never used.","'setCoinChartData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'lastPrice'. Either include it or remove the dependency array.","ArrayExpression",["201"],"'useEffect' is defined but never used.","'useRef' is defined but never used.","'useContext' is defined but never used.","'createChart' is defined but never used.","'axios' is defined but never used.","'marketCap' is assigned a value but never used.","'volume24hr' is assigned a value but never used.","React Hook useEffect contains a call to 'setSparklineColor'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [percentChange7d] as a second argument to the useEffect Hook.",["202"],"'percentChange7d' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'retrieveChartData'. Either include it or remove the dependency array.",["203"],["199"],["200"],["199"],["200"],["204"],"React Hook useEffect has a missing dependency: 'getIdsAfterPageLoad'. Either include it or remove the dependency array.",["205"],"'isMountedTwo' is assigned a value but never used.","'id' is assigned a value but never used.","'globalChart' is assigned a value but never used.","'globalLineSeries' is assigned a value but never used.","'globalVolumeSeries' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'retrieveChartData' and 'timeFrameToFetch'. Either include them or remove the dependency array.",["206"],"React Hook useEffect has missing dependencies: 'renderChart', 'retrieveChartData', 'timeFrameToFetch', and 'updateChartData'. Either include them or remove the dependency array.",["207"],["208"],"no-undef","'handleClick' is not defined.","undef",["199"],["200"],"no-global-assign","no-unsafe-negation",{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"209","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"211","fix":"222"},"Update the dependencies array to be: [ethereumPrice, lastPrice]",{"range":"223","text":"224"},"Add dependencies array: [percentChange7d]",{"range":"225","text":"226"},"Update the dependencies array to be: [retrieveChartData]",{"range":"227","text":"228"},{"range":"229","text":"224"},"Update the dependencies array to be: [coinData, getIdsAfterPageLoad]",{"range":"230","text":"231"},"Update the dependencies array to be: [retrieveChartData, selectedCoinData, timeFrameToFetch]",{"range":"232","text":"233"},"Update the dependencies array to be: [coinChartData, renderChart, retrieveChartData, timeFrameToFetch, updateChartData, viewFieldDuration]",{"range":"234","text":"235"},{"range":"236","text":"226"},[845,860],"[ethereumPrice, lastPrice]",[982,982],", [percentChange7d]",[2906,2908],"[retrieveChartData]",[845,860],[7075,7085],"[coinData, getIdsAfterPageLoad]",[5060,5078],"[retrieveChartData, selectedCoinData, timeFrameToFetch]",[11213,11247],"[coinChartData, renderChart, retrieveChartData, timeFrameToFetch, updateChartData, viewFieldDuration]",[982,982]]